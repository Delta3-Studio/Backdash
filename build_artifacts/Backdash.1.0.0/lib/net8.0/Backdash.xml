<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Backdash</name>
    </assembly>
    <members>
        <member name="F:Backdash.Core.Default.SpectatorOffset">
            <value>Defaults to <c>1000</c></value>
        </member>
        <member name="F:Backdash.Core.Default.RecommendationInterval">
            <value>Defaults to <c>240</c> milliseconds</value>
        </member>
        <member name="F:Backdash.Core.Default.UdpPacketBufferSize">
            <value>Defaults to <c>4096</c></value>
        </member>
        <member name="F:Backdash.Core.Default.PredictionFramesOffset">
            <value>Defaults to <c>2</c></value>
        </member>
        <member name="F:Backdash.Core.Default.PredictionFrames">
            <value>Defaults to <c>16</c></value>
        </member>
        <member name="F:Backdash.Core.Default.DisconnectNotifyStart">
            <value>Defaults to <c>750</c> milliseconds</value>
        </member>
        <member name="F:Backdash.Core.Default.DisconnectTimeout">
            <value>Defaults to <c>5_000</c> milliseconds</value>
        </member>
        <member name="F:Backdash.Core.Default.InputQueueLength">
            <value>Defaults to <c>128</c></value>
        </member>
        <member name="F:Backdash.Core.Default.MaxPendingInputs">
            <value>Defaults to <c>64</c></value>
        </member>
        <member name="F:Backdash.Core.Default.MaxPackageQueue">
            <value>Defaults to <c>64</c></value>
        </member>
        <member name="F:Backdash.Core.Default.NumberOfSyncPackets">
            <value>Defaults to <c>10</c></value>
        </member>
        <member name="F:Backdash.Core.Default.UdpShutdownTime">
            <value>Defaults to <c>100</c> milliseconds</value>
        </member>
        <member name="F:Backdash.Core.Default.MaxSeqDistance">
            <value>Defaults to <c>32_768</c></value>
        </member>
        <member name="F:Backdash.Core.Default.SyncRetryInterval">
            <value>Defaults to <c>1000</c> milliseconds</value>
        </member>
        <member name="F:Backdash.Core.Default.SyncFirstRetryInterval">
            <value>Defaults to <c>500</c> milliseconds</value>
        </member>
        <member name="F:Backdash.Core.Default.KeepAliveInterval">
            <value>Defaults to <c>200</c> milliseconds</value>
        </member>
        <member name="F:Backdash.Core.Default.QualityReportInterval">
            <value>Defaults to <c>1000</c> milliseconds</value>
        </member>
        <member name="F:Backdash.Core.Default.NetworkStatsInterval">
            <value>Defaults to <c>1000</c> milliseconds</value>
        </member>
        <member name="F:Backdash.Core.Default.FrameDelay">
            <value>Defaults to <c>2</c></value>
        </member>
        <member name="F:Backdash.Core.Default.ResendInputInterval">
            <value>Defaults to <c>200</c> milliseconds</value>
        </member>
        <member name="F:Backdash.Core.Default.MaxSyncRetries">
            <value>Defaults to <c>64</c></value>
        </member>
        <member name="T:Backdash.Core.NetcodeException">
            <summary>
                An exception that is thrown when an error is encountered on netcode.
            </summary>
        </member>
        <member name="T:Backdash.Core.NetcodeDeserializationException">
            <summary>
                An exception that is thrown when an error is encountered on netcode deserialization.
            </summary>
        </member>
        <member name="T:Backdash.Core.NetcodeDeserializationException`1">
            <summary>
                An exception that is thrown when an error is encountered on netcode deserialization for type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Deserialization type</typeparam>
        </member>
        <member name="T:Backdash.Core.NetcodeSerializationException">
            <summary>
                An exception that is thrown when an error is encountered on netcode serialization.
            </summary>
        </member>
        <member name="T:Backdash.Core.NetcodeSerializationException`1">
            <summary>
                An exception that is thrown when an error is encountered on netcode serialization for type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Serialization type</typeparam>
        </member>
        <member name="T:Backdash.Core.InvalidTypeArgumentException">
            <summary>
                An exception that is thrown for invalid type arguments.
            </summary>
        </member>
        <member name="T:Backdash.Core.InvalidTypeArgumentException`1">
            <summary>
                An exception that is thrown when for invalid type argument <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Generic type argument</typeparam>
        </member>
        <member name="T:Backdash.Core.LogLevel">
            <summary>
            Defines logging severity levels.
            </summary>
        </member>
        <member name="F:Backdash.Core.LogLevel.None">
            <summary>
            Specifies that a logging category should not write any messages.
            </summary>
        </member>
        <member name="F:Backdash.Core.LogLevel.Trace">
            <summary>
            Logs that contain the most detailed messages.
            </summary>
        </member>
        <member name="F:Backdash.Core.LogLevel.Debug">
            <summary>
            Logs that are used for interactive investigation during development.
            </summary>
        </member>
        <member name="F:Backdash.Core.LogLevel.Information">
            <summary>
            Logs that track the general flow of the application.
            </summary>
        </member>
        <member name="F:Backdash.Core.LogLevel.Warning">
            <summary>
            Logs that highlight an abnormal or unexpected event in the application flow,
            but do not otherwise cause the application execution to stop.
            </summary>
        </member>
        <member name="F:Backdash.Core.LogLevel.Error">
            <summary>
            Logs that highlight when the current flow of execution is stopped due to a failure
            </summary>
        </member>
        <member name="T:Backdash.Core.LogOptions">
            <summary>
            Specifies options common to logging
            </summary>
            <param name="level"><see cref="P:Backdash.Core.LogOptions.EnabledLevel"/> value.</param>
        </member>
        <member name="M:Backdash.Core.LogOptions.#ctor(Backdash.Core.LogLevel)">
            <summary>
            Specifies options common to logging
            </summary>
            <param name="level"><see cref="P:Backdash.Core.LogOptions.EnabledLevel"/> value.</param>
        </member>
        <member name="P:Backdash.Core.LogOptions.EnabledLevel">
            <summary>
            Gets or sets the enabled <see cref="T:Backdash.Core.LogLevel"/>
            </summary>
        </member>
        <member name="P:Backdash.Core.LogOptions.AppendTimestamps">
            <summary>
            Gets or sets a value indicating whether timestamps should be prepended to logs.
            <value>Defaults to <see langword="true"/></value>
            </summary>
        </member>
        <member name="P:Backdash.Core.LogOptions.AppendLevel">
            <summary>
            Gets or sets a value indicating whether level name should be prepended to logs.
            <value>Defaults to <see langword="true"/></value>
            </summary>
        </member>
        <member name="P:Backdash.Core.LogOptions.TimestampFormat">
            <summary>
            Gets or sets a value indicating whether the format for log timestamps.
            <value>Defaults to "mm:ss.fff"</value>
            </summary>
        </member>
        <member name="P:Backdash.Core.LogOptions.AppendThreadId">
            <summary>
            Gets or sets a value indicating whether thread id should be prepended to logs.
            <value>Defaults to <see langword="false"/></value>
            </summary>
        </member>
        <member name="T:Backdash.Core.ILogWriter">
            <summary>
            Defines how and where the log's should be written.
            </summary>
        </member>
        <member name="M:Backdash.Core.ILogWriter.Write(Backdash.Core.LogLevel,System.Char[],System.Int32)">
            <summary>
            Write <paramref name="chars"/> into an output.
            </summary>
            <param name="level">Current <see cref="T:Backdash.Core.LogLevel"/> level.</param>
            <param name="chars">Char buffer array containing the log message</param>
            <param name="size">Number of chars of characters to read from <paramref name="chars"/></param>
        </member>
        <member name="T:Backdash.Core.TextLogWriter">
            <summary>
            Base implementation of <see cref="T:Backdash.Core.ILogWriter"/> for any <see cref="P:Backdash.Core.TextLogWriter.textWriter"/>.
            </summary>
        </member>
        <member name="P:Backdash.Core.TextLogWriter.textWriter">
            <summary>
            Current <see cref="T:System.IO.TextWriter"/>
            </summary>
        </member>
        <member name="M:Backdash.Core.TextLogWriter.Write(Backdash.Core.LogLevel,System.Char[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Core.TextLogWriter.Dispose(System.Boolean)">
            <summary>
            Releases all resources currently used by this <see cref="T:Backdash.Core.TextLogWriter"/> instance.
            </summary>
            <param name="disposing"><see langword="true"/> if this method is being invoked by the <see cref="M:Backdash.Core.TextLogWriter.Dispose"/> method,
            otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Backdash.Core.TextLogWriter.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Backdash.Core.ConsoleTextLogWriter">
            <summary>
            Implementation of <see cref="T:Backdash.Core.ILogWriter"/> for logging into <see cref="T:System.Console"/>.
            </summary>
        </member>
        <member name="P:Backdash.Core.ConsoleTextLogWriter.textWriter">
            <inheritdoc />
        </member>
        <member name="T:Backdash.Core.FileTextLogWriter">
            <summary>
            Implementation of <see cref="T:Backdash.Core.ILogWriter"/> for logging into a file.
            </summary>
        </member>
        <member name="P:Backdash.Core.FileTextLogWriter.textWriter">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Core.FileTextLogWriter.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Backdash.Core.FileTextLogWriter"/> class.
            </summary>
            <param name="filename">Log file name<remarks>
            you can use placeholders for:
            - <see cref="P:System.Environment.ProcessId"/>: <c>"{{proc_id}}"</c>;
            - <see cref="P:System.DateTime.UtcNow"/>: <c>"{{timestamp}}"</c>;
            </remarks>
            <value>Defaults to <c>"{{proc_id}}_{{timestamp}}.log"</c></value>
            </param>
            <param name="append">
            true to append data to the file; false to overwrite the file. If the specified file does not exist, this parameter has no effect, and the constructor creates a new file.
            </param>
        </member>
        <member name="F:Backdash.Core.Max.NumberOfPlayers">
            <value>4</value>
        </member>
        <member name="F:Backdash.Core.Max.NumberOfSpectators">
            <value>32</value>
        </member>
        <member name="T:Backdash.Data.Array`1">
            <summary>
            An <see cref="T:System.IEquatable`1"/> array with O(1) indexable lookup time
            </summary>
            <typeparam name="T">The type of element that implements <see cref="T:System.IEquatable`1"/> stored by the array.</typeparam>
        </member>
        <member name="M:Backdash.Data.Array`1.#ctor(`0[])">
            <summary>
            An <see cref="T:System.IEquatable`1"/> array with O(1) indexable lookup time
            </summary>
            <typeparam name="T">The type of element that implements <see cref="T:System.IEquatable`1"/> stored by the array.</typeparam>
        </member>
        <member name="M:Backdash.Data.Array`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Backdash.Data.Array`1"/> class of size <paramref name="size"/>.
            </summary>
            <param name="size">Array capacity</param>
        </member>
        <member name="M:Backdash.Data.Array`1.#ctor">
            <summary>
            Initializes an empty new instance of the <see cref="T:Backdash.Data.Array`1"/>.
            </summary>
        </member>
        <member name="F:Backdash.Data.Array`1.Empty">
            <summary>
            Returns an empty <see cref="T:Backdash.Data.Array`1"/>.
            </summary>
        </member>
        <member name="P:Backdash.Data.Array`1.Length">
            <summary>
            Gets the total number of elements in all the dimensions of the <see cref="T:Backdash.Data.Array`1"/>.
            </summary>
        </member>
        <member name="P:Backdash.Data.Array`1.IsEmpty">
            <summary>
            Returns a value that indicates whether the current <see cref="T:Backdash.Data.Array`1"/> is empty.
            </summary>
        </member>
        <member name="M:Backdash.Data.Array`1.AsReadOnly">
            <summary>
            Returns a read-only <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> wrapper for the current <see cref="T:Backdash.Data.Array`1"/>.
            </summary>
        </member>
        <member name="M:Backdash.Data.Array`1.AsArray">
            <summary>
            Returns the internal array of the current <see cref="T:Backdash.Data.Array`1"/>.
            </summary>
        </member>
        <member name="M:Backdash.Data.Array`1.AsSpan">
            <inheritdoc cref="M:System.MemoryExtensions.AsSpan``1(``0[])"/>
        </member>
        <member name="M:Backdash.Data.Array`1.AsMemory">
            <inheritdoc cref="M:System.MemoryExtensions.AsMemory``1(``0[])"/>
        </member>
        <member name="M:Backdash.Data.Array`1.CopyTo(System.Span{`0})">
            <inheritdoc cref="M:System.MemoryExtensions.CopyTo``1(``0[],System.Span{``0})"/>
        </member>
        <member name="M:Backdash.Data.Array`1.CopyTo(System.Memory{`0})">
            <inheritdoc cref="M:System.MemoryExtensions.CopyTo``1(``0[],System.Memory{``0})"/>
        </member>
        <member name="M:Backdash.Data.Array`1.CopyTo(Backdash.Data.Array{`0})">
            <summary>
            Copies the contents of the <see cref="T:Backdash.Data.Array`1"/> into other <see cref="T:Backdash.Data.Array`1"/>.
            </summary>
        </member>
        <member name="P:Backdash.Data.Array`1.Item(System.Int32)">
            <summary>
            Returns a reference to specified element of the <see cref="T:Backdash.Data.Array`1"/>.
            </summary>
            <param name="index">array index</param>
        </member>
        <member name="P:Backdash.Data.Array`1.Item(System.Index)">
            <summary>
            Returns a reference to specified element at <paramref name="index"/> of the <see cref="T:Backdash.Data.Array`1"/>.
            </summary>
            <param name="index">array index</param>
        </member>
        <member name="P:Backdash.Data.Array`1.Item(System.Range)">
            <summary>
            Returns a rage slice as a copy of the current <see cref="T:Backdash.Data.Array`1"/>
            </summary>
        </member>
        <member name="M:Backdash.Data.Array`1.Clear(System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Array.Clear(System.Array,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Backdash.Data.Array`1.Clear(System.Range)">
            <summary>
            Sets a range of elements in an array to the default value of each element type.
            </summary>
            <param name="range">Slice to be clean</param>
        </member>
        <member name="M:Backdash.Data.Array`1.Clear">
            <summary>
            Sets all elements in an array to the default value of each element type.
            </summary>
        </member>
        <member name="M:Backdash.Data.Array`1.Equals(Backdash.Data.Array{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Backdash.Data.Array`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Backdash.Data.Array`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Backdash.Data.Array`1.Exist(System.Predicate{`0})">
            <summary>
             Determines whether the specified array contains elements that match the conditions defined by the specified predicate.
            </summary>
        </member>
        <member name="M:Backdash.Data.Array`1.FindAll(System.Predicate{`0})">
            <summary>
             Filters an array of values based on a predicate.
            </summary>
        </member>
        <member name="M:Backdash.Data.Array`1.Find(System.Predicate{`0})">
            <summary>
             Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire Array.
            </summary>
        </member>
        <member name="M:Backdash.Data.Array`1.FindLast(System.Predicate{`0})">
            <summary>
             Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire Array.
            </summary>
        </member>
        <member name="M:Backdash.Data.Array`1.FindIndex(System.Predicate{`0})">
            <summary>
             Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire Array.
            </summary>
        </member>
        <member name="M:Backdash.Data.Array`1.FindLastIndex(System.Predicate{`0})">
            <summary>
             Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire Array.
            </summary>
        </member>
        <member name="M:Backdash.Data.Array`1.Resize(System.Int32)">
            <summary>
             Changes the number of elements of a one-dimensional array to the specified new size.
            </summary>
        </member>
        <member name="M:Backdash.Data.Array`1.Fill(`0)">
            <summary>
             Assigns the given value of type T to each element of the specified array.
            </summary>
        </member>
        <member name="M:Backdash.Data.Array`1.Fill(System.Func{`0})">
            <summary>
             Assigns the given return value from delegate of type T to each element of the specified array.
            </summary>
        </member>
        <member name="M:Backdash.Data.Array`1.ToResized(System.Int32)">
            <summary>
             Crates new array with new size copying elements from source
            </summary>
        </member>
        <member name="M:Backdash.Data.Array`1.Clone">
            <summary>
             Create new array with same values
            </summary>
        </member>
        <member name="M:Backdash.Data.Array`1.Reverse">
            <summary>
             Reverses the sequence of the elements in the one-dimensional generic array.
            </summary>
        </member>
        <member name="M:Backdash.Data.Array`1.Reverse(System.Int32,System.Int32)">
            <summary>
             Reverses the sequence of a subset of the elements in the one-dimensional generic array.
            </summary>
        </member>
        <member name="M:Backdash.Data.Array`1.Reverse(System.Range)">
            <summary>
             Reverses the sequence of a subset of the elements in the one-dimensional generic array.
            </summary>
        </member>
        <member name="M:Backdash.Data.Array`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
             Sorts the elements of an array in ascending order.
            </summary>
        </member>
        <member name="M:Backdash.Data.Array`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
             Sorts the elements in a range of elements in an Array
            </summary>
        </member>
        <member name="M:Backdash.Data.Array`1.Sort(System.Range,System.Collections.Generic.IComparer{`0})">
            <summary>
             Sorts the elements in a range of elements in an Array
            </summary>
        </member>
        <member name="M:Backdash.Data.Array`1.ToSorted(System.Collections.Generic.IComparer{`0})">
            <summary>
             Sorts the elements of an array in ascending order into a new array.
            </summary>
        </member>
        <member name="M:Backdash.Data.Array`1.ToSorted(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
             Sorts the elements in a range of elements in an Array into a new array
            </summary>
        </member>
        <member name="M:Backdash.Data.Array`1.ToSorted(System.Range,System.Collections.Generic.IComparer{`0})">
            <summary>
             Sorts the elements in a range of elements in an Array into a new array
            </summary>
        </member>
        <member name="M:Backdash.Data.Array`1.SortBy``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
             Sorts the elements of an array in ascending order according to a key.
            </summary>
        </member>
        <member name="M:Backdash.Data.Array`1.ToSortedBy``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
             Sorts the elements of an array in ascending order according to a key.
            </summary>
        </member>
        <member name="M:Backdash.Data.Array`1.Map``1(System.Func{`0,``0})">
            <summary>
             Sorts the elements of an array in ascending order according to a key.
            </summary>
        </member>
        <member name="M:Backdash.Data.Array`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Backdash.Data.Array`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:Backdash.Data.Array`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.Array`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.Array`1.op_Implicit(Backdash.Data.Array{`0})~`0[]">
            <inheritdoc cref="M:Backdash.Data.Array`1.AsArray" />
        </member>
        <member name="M:Backdash.Data.Array`1.op_Implicit(Backdash.Data.Array{`0})~System.Span{`0}">
            <inheritdoc cref="M:Backdash.Data.Array`1.AsSpan" />
        </member>
        <member name="M:Backdash.Data.Array`1.op_Implicit(Backdash.Data.Array{`0})~System.ReadOnlySpan{`0}">
            <inheritdoc cref="M:Backdash.Data.Array`1.AsSpan" />
        </member>
        <member name="M:Backdash.Data.Array`1.op_Implicit(Backdash.Data.Array{`0})~System.Memory{`0}">
            <inheritdoc cref="M:Backdash.Data.Array`1.AsMemory" />
        </member>
        <member name="M:Backdash.Data.Array`1.op_Equality(Backdash.Data.Array{`0},Backdash.Data.Array{`0})">
            <inheritdoc cref="M:Backdash.Data.Array`1.Equals(Backdash.Data.Array{`0})" />
        </member>
        <member name="M:Backdash.Data.Array`1.op_Inequality(Backdash.Data.Array{`0},Backdash.Data.Array{`0})">
            <inheritdoc cref="M:Backdash.Data.Array`1.Equals(Backdash.Data.Array{`0})" />
        </member>
        <member name="T:Backdash.Data.Array`1.Enumerator">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.Array`1.Enumerator.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.Array`1.Enumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="P:Backdash.Data.Array`1.Enumerator.Current">
            <inheritdoc />
        </member>
        <member name="T:Backdash.Data.ArrayCollectionBuilder">
            <summary>
            Initialization methods for instances of <see cref="T:Backdash.Data.Array`1"/>.
            </summary>
        </member>
        <member name="M:Backdash.Data.ArrayCollectionBuilder.Create``1(System.ReadOnlySpan{``0})">
            <summary>
            Produce an <see cref="T:Backdash.Data.Array`1"/> of contents from specified elements.
            </summary>
            <typeparam name="T">The type of element in the array.</typeparam>
            <param name="items">The elements to store in the array.</param>
            <returns>An array containing the specified items.</returns>
        </member>
        <member name="T:Backdash.Data.ByteSize">
            <summary>
            Represents a byte size value
            </summary>
        </member>
        <member name="M:Backdash.Data.ByteSize.#ctor(System.Int64)">
            <summary>
            Represents a byte size value
            </summary>
        </member>
        <member name="P:Backdash.Data.ByteSize.One">
            <summary>Gets the byte value <c>1</c>.</summary>
        </member>
        <member name="P:Backdash.Data.ByteSize.Zero">
            <summary>Gets the byte value <c>0</c>.</summary>
        </member>
        <member name="P:Backdash.Data.ByteSize.KibiBytes">
            <summary>Gets the number of KibiBytes represented by this object.</summary>
        </member>
        <member name="P:Backdash.Data.ByteSize.MebiBytes">
            <summary>Gets the number of MebiBytes represented by this object.</summary>
        </member>
        <member name="P:Backdash.Data.ByteSize.GibiBytes">
            <summary>Gets the number of GibiBytes represented by this object.</summary>
        </member>
        <member name="P:Backdash.Data.ByteSize.TebiBytes">
            <summary>Gets the number of TebiBytes represented by this object.</summary>
        </member>
        <member name="P:Backdash.Data.ByteSize.KiloBytes">
            <summary>Gets the number of KiloBytes represented by this object.</summary>
        </member>
        <member name="P:Backdash.Data.ByteSize.MegaBytes">
            <summary>Gets the number of MegaBytes represented by this object.</summary>
        </member>
        <member name="P:Backdash.Data.ByteSize.GigaBytes">
            <summary>Gets the number of GigaBytes represented by this object.</summary>
        </member>
        <member name="P:Backdash.Data.ByteSize.TeraBytes">
            <summary>Gets the number of TeraBytes represented by this object.</summary>
        </member>
        <member name="M:Backdash.Data.ByteSize.CompareTo(Backdash.Data.ByteSize)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.ByteSize.ToString(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.ByteSize.ToString">
            <summary>
            Returns the string representation for the current byte size
            </summary>
        </member>
        <member name="M:Backdash.Data.ByteSize.ToString(System.String)">
            <inheritdoc cref="M:Backdash.Data.ByteSize.ToString(System.String,System.IFormatProvider)" />
        </member>
        <member name="M:Backdash.Data.ByteSize.ToString(Backdash.Data.ByteSize.Measure)">
            <summary>
            Returns the string representation for the current byte size as <paramref name="measure"/>
            </summary>
            <para name="measure">The unit of measure conversion</para>
        </member>
        <member name="M:Backdash.Data.ByteSize.TryFormat(System.Span{System.Byte},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc cref="M:Backdash.Data.ByteSize.ToString(System.String,System.IFormatProvider)" />
        </member>
        <member name="M:Backdash.Data.ByteSize.op_GreaterThan(Backdash.Data.ByteSize,Backdash.Data.ByteSize)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.ByteSize.op_GreaterThanOrEqual(Backdash.Data.ByteSize,Backdash.Data.ByteSize)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.ByteSize.op_LessThan(Backdash.Data.ByteSize,Backdash.Data.ByteSize)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.ByteSize.op_LessThanOrEqual(Backdash.Data.ByteSize,Backdash.Data.ByteSize)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.ByteSize.op_Increment(Backdash.Data.ByteSize)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.ByteSize.op_Decrement(Backdash.Data.ByteSize)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.ByteSize.op_Addition(Backdash.Data.ByteSize,Backdash.Data.ByteSize)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.ByteSize.op_Subtraction(Backdash.Data.ByteSize,Backdash.Data.ByteSize)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.ByteSize.op_Division(Backdash.Data.ByteSize,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.ByteSize.op_Division(Backdash.Data.ByteSize,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.ByteSize.op_Multiply(Backdash.Data.ByteSize,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.ByteSize.op_Multiply(System.Int64,Backdash.Data.ByteSize)">
            <inheritdoc cref="M:Backdash.Data.ByteSize.op_Multiply(Backdash.Data.ByteSize,System.Int64)" />
        </member>
        <member name="M:Backdash.Data.ByteSize.op_Explicit(System.Int64)~Backdash.Data.ByteSize">
            <summary>
            Returns new <see cref="T:Backdash.Data.ByteSize"/> with <paramref name="value"/> bytes
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Backdash.Data.ByteSize.op_Explicit(System.Int32)~Backdash.Data.ByteSize">
            <inheritdoc cref="M:Backdash.Data.ByteSize.op_Explicit(System.Int64)~Backdash.Data.ByteSize" />
        </member>
        <member name="M:Backdash.Data.ByteSize.op_Explicit(System.UInt32)~Backdash.Data.ByteSize">
            <inheritdoc cref="M:Backdash.Data.ByteSize.op_Explicit(System.Int64)~Backdash.Data.ByteSize" />
        </member>
        <member name="M:Backdash.Data.ByteSize.op_Explicit(System.Int16)~Backdash.Data.ByteSize">
            <inheritdoc cref="M:Backdash.Data.ByteSize.op_Explicit(System.Int64)~Backdash.Data.ByteSize" />
        </member>
        <member name="M:Backdash.Data.ByteSize.op_Explicit(System.UInt16)~Backdash.Data.ByteSize">
            <inheritdoc cref="M:Backdash.Data.ByteSize.op_Explicit(System.Int64)~Backdash.Data.ByteSize" />
        </member>
        <member name="M:Backdash.Data.ByteSize.op_Explicit(System.SByte)~Backdash.Data.ByteSize">
            <inheritdoc cref="M:Backdash.Data.ByteSize.op_Explicit(System.Int64)~Backdash.Data.ByteSize" />
        </member>
        <member name="M:Backdash.Data.ByteSize.op_Explicit(System.Byte)~Backdash.Data.ByteSize">
            <inheritdoc cref="M:Backdash.Data.ByteSize.op_Explicit(System.Int64)~Backdash.Data.ByteSize" />
        </member>
        <member name="M:Backdash.Data.ByteSize.FromBytes(System.Int64)">
            <summary>
            Returns new <see cref="T:Backdash.Data.ByteSize"/> with <paramref name="value"/> bytes
            </summary>
            <param name="value">Number of bytes</param>
        </member>
        <member name="M:Backdash.Data.ByteSize.FromKiloByte(System.Double)">
            <summary>
            Returns new <see cref="T:Backdash.Data.ByteSize"/> with <paramref name="value"/> kilo-bytes
            </summary>
            <param name="value">Number of kilo-bytes</param>
        </member>
        <member name="M:Backdash.Data.ByteSize.FromMegaBytes(System.Double)">
            <summary>
            Returns new <see cref="T:Backdash.Data.ByteSize"/> with <paramref name="value"/> mega-bytes
            </summary>
            <param name="value">Number of mega-bytes</param>
        </member>
        <member name="M:Backdash.Data.ByteSize.FromGigaBytes(System.Double)">
            <summary>
            Returns new <see cref="T:Backdash.Data.ByteSize"/> with <paramref name="value"/> giga-bytes
            </summary>
            <param name="value">Number of giga-bytes</param>
        </member>
        <member name="M:Backdash.Data.ByteSize.FromTeraBytes(System.Double)">
            <summary>
            Returns new <see cref="T:Backdash.Data.ByteSize"/> with <paramref name="value"/> tera-bytes
            </summary>
            <param name="value">Number of tera-bytes</param>
        </member>
        <member name="M:Backdash.Data.ByteSize.FromKibiBytes(System.Double)">
            <summary>
            Returns new <see cref="T:Backdash.Data.ByteSize"/> with <paramref name="value"/> kibi-bytes
            </summary>
            <param name="value">Number of kibi-bytes</param>
        </member>
        <member name="M:Backdash.Data.ByteSize.FromMebiBytes(System.Double)">
            <summary>
            Returns new <see cref="T:Backdash.Data.ByteSize"/> with <paramref name="value"/> mebi-bytes
            </summary>
            <param name="value">Number of mebi-bytes</param>
        </member>
        <member name="M:Backdash.Data.ByteSize.FromGibiBytes(System.Double)">
            <summary>
            Returns new <see cref="T:Backdash.Data.ByteSize"/> with <paramref name="value"/> gibi-bytes
            </summary>
            <param name="value">Number of gibi-bytes</param>
        </member>
        <member name="M:Backdash.Data.ByteSize.FromTebiBytes(System.Double)">
            <summary>
            Returns new <see cref="T:Backdash.Data.ByteSize"/> with <paramref name="value"/> gibi-bytes
            </summary>
            <param name="value">Number of tebi-bytes</param>
        </member>
        <member name="T:Backdash.Data.ByteSize.Measure">
            <summary>
            Unit of measure for <see cref="T:Backdash.Data.ByteSize"/>
            </summary>
        </member>
        <member name="F:Backdash.Data.ByteSize.Measure.Byte">
            <summary>
            Byte
            </summary>
        </member>
        <member name="F:Backdash.Data.ByteSize.Measure.KibiByte">
            <summary>
            1KiB == 1024 bytes
            </summary>
        </member>
        <member name="F:Backdash.Data.ByteSize.Measure.MebiByte">
            <summary>
            1MiB == 1_048_576 bytes
            </summary>
        </member>
        <member name="F:Backdash.Data.ByteSize.Measure.GibiByte">
            <summary>
            1GiB == 1_073_741_824 bytes
            </summary>
        </member>
        <member name="F:Backdash.Data.ByteSize.Measure.TebiByte">
            <summary>
            1TiB == 1_099_511_627_776 bytes
            </summary>
        </member>
        <member name="F:Backdash.Data.ByteSize.Measure.KiloByte">
            <summary>
            1KB == 1000 bytes
            </summary>
        </member>
        <member name="F:Backdash.Data.ByteSize.Measure.MegaByte">
            <summary>
            1MB == 1_000_000 bytes
            </summary>
        </member>
        <member name="F:Backdash.Data.ByteSize.Measure.GigaByte">
            <summary>
            1GB == 1_000_000_000 bytes
            </summary>
        </member>
        <member name="F:Backdash.Data.ByteSize.Measure.TeraByte">
            <summary>
            1TB == 1_000_000_000_000 bytes
            </summary>
        </member>
        <member name="F:Backdash.Data.ByteSize.Measure.Unknown">
            <summary>
            Unknown unit of measure
            </summary>
        </member>
        <member name="T:Backdash.Data.Frame">
            <summary>
            Value representation of a Frame
            </summary>
        </member>
        <member name="F:Backdash.Data.Frame.Null">
            <summary>Return Null frame value</summary>
        </member>
        <member name="F:Backdash.Data.Frame.Zero">
            <summary>Return frame value <c>0</c></summary>
        </member>
        <member name="F:Backdash.Data.Frame.One">
            <summary>Return frame value <c>1</c></summary>
        </member>
        <member name="F:Backdash.Data.Frame.MaxValue">
            <summary>Returns max frame value</summary>
        </member>
        <member name="F:Backdash.Data.Frame.Number">
            <summary>Returns the <see cref="T:System.Int32"/> value for the current <see cref="T:Backdash.Data.Frame"/>.</summary>
        </member>
        <member name="M:Backdash.Data.Frame.#ctor(System.Int32)">
            <summary>
            Initialize new <see cref="T:Backdash.Data.Frame"/> for frame <paramref name="number" />.
            </summary>
            <param name="number"></param>
        </member>
        <member name="M:Backdash.Data.Frame.Next">
            <summary>
            Returns the next frame for the current <see cref="T:Backdash.Data.Frame"/> value.
            </summary>
        </member>
        <member name="M:Backdash.Data.Frame.Previous">
            <summary>
            Returns the previous frame for the current <see cref="T:Backdash.Data.Frame"/> value.
            </summary>
        </member>
        <member name="P:Backdash.Data.Frame.IsNull">
            <summary>
            Returns <see langword="true"/> if the current frame is a null frame
            </summary>
        </member>
        <member name="P:Backdash.Data.Frame.IsNotNull">
            <summary>
            Returns <see langword="true"/> if the current frame is not a null frame
            </summary>
        </member>
        <member name="M:Backdash.Data.Frame.CompareTo(Backdash.Data.Frame)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.Frame.CompareTo(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.Frame.Equals(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.Frame.ToString(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.Frame.ToString">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.Frame.TryFormat(System.Span{System.Byte},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.Frame.op_Explicit(Backdash.Data.Frame)~System.Int32">
            <inheritdoc cref="F:Backdash.Data.Frame.Number" />
        </member>
        <member name="M:Backdash.Data.Frame.op_Explicit(System.Int32)~Backdash.Data.Frame">
            <inheritdoc cref="M:Backdash.Data.Frame.#ctor(System.Int32)" />
        </member>
        <member name="M:Backdash.Data.Frame.Min(Backdash.Data.Frame@,Backdash.Data.Frame@)">
            <summary>Returns the smaller of two <see cref="T:Backdash.Data.Frame"/>.</summary>
        </member>
        <member name="M:Backdash.Data.Frame.Max(Backdash.Data.Frame@,Backdash.Data.Frame@)">
            <summary>Returns the larger of two <see cref="T:Backdash.Data.Frame"/>.</summary>
        </member>
        <member name="M:Backdash.Data.Frame.op_GreaterThan(Backdash.Data.Frame,Backdash.Data.Frame)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.Frame.op_GreaterThanOrEqual(Backdash.Data.Frame,Backdash.Data.Frame)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.Frame.op_LessThan(Backdash.Data.Frame,Backdash.Data.Frame)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.Frame.op_LessThanOrEqual(Backdash.Data.Frame,Backdash.Data.Frame)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.Frame.op_Increment(Backdash.Data.Frame)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.Frame.op_Decrement(Backdash.Data.Frame)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.Frame.op_Addition(Backdash.Data.Frame,Backdash.Data.Frame)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.Frame.op_Subtraction(Backdash.Data.Frame,Backdash.Data.Frame)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.Frame.op_Modulus(Backdash.Data.Frame,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.Frame.op_Addition(Backdash.Data.Frame,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.Frame.op_Subtraction(Backdash.Data.Frame,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.Frame.op_Equality(Backdash.Data.Frame,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.Frame.op_Inequality(Backdash.Data.Frame,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.Frame.op_GreaterThan(Backdash.Data.Frame,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.Frame.op_GreaterThanOrEqual(Backdash.Data.Frame,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.Frame.op_LessThan(Backdash.Data.Frame,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.Frame.op_LessThanOrEqual(Backdash.Data.Frame,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.Frame.op_Addition(Backdash.Data.Frame,Backdash.Data.FrameSpan)">
            <inheritdoc />
        </member>
        <member name="T:Backdash.Data.FrameSpan">
            <summary>
            Value representation of a span of frames
            </summary>
        </member>
        <member name="F:Backdash.Data.FrameSpan.DefaultFramesPerSecond">
            <summary>Default FPS(frames per second)<value>60</value></summary>
        </member>
        <member name="F:Backdash.Data.FrameSpan.Zero">
            <summary>Return frame span of <c>0</c> frames</summary>
        </member>
        <member name="F:Backdash.Data.FrameSpan.One">
            <summary>Return frame span of <c>1</c> frame</summary>
        </member>
        <member name="F:Backdash.Data.FrameSpan.MaxValue">
            <summary>Returns max frame span value</summary>
        </member>
        <member name="F:Backdash.Data.FrameSpan.FrameCount">
            <summary>Returns the <see cref="T:System.Int32"/> count of frames in the current frame span <see cref="T:Backdash.Data.Frame"/>.</summary>
        </member>
        <member name="M:Backdash.Data.FrameSpan.#ctor(System.Int32)">
            <summary>
            Initialize new <see cref="T:Backdash.Data.FrameSpan"/> for frame <paramref name="frameCount" />.
            </summary>
            <param name="frameCount"></param>
        </member>
        <member name="M:Backdash.Data.FrameSpan.Seconds(System.Int16)">
            <summary>Returns the time value for the current frame span in seconds</summary>.
        </member>
        <member name="M:Backdash.Data.FrameSpan.Duration(System.Int16)">
            <summary>Returns the time value for the current frame span in <see cref="T:System.TimeSpan"/>.</summary>
        </member>
        <member name="P:Backdash.Data.FrameSpan.Value">
            <summary>Returns the value for the current frame span as a <see cref="T:Backdash.Data.Frame"/>.</summary>
        </member>
        <member name="M:Backdash.Data.FrameSpan.CompareTo(Backdash.Data.FrameSpan)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.FrameSpan.ToString(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.FrameSpan.ToString">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.FrameSpan.TryFormat(System.Span{System.Byte},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.FrameSpan.Of(System.Int32)">
            <inheritdoc cref="M:Backdash.Data.FrameSpan.#ctor(System.Int32)"/>
        </member>
        <member name="M:Backdash.Data.FrameSpan.FromSeconds(System.Double,System.Int16)">
            <summary>
            Returns new <see cref="T:Backdash.Data.FrameSpan"/> for <paramref name="seconds"/> at specified <paramref name="fps"/>.
            </summary>
        </member>
        <member name="M:Backdash.Data.FrameSpan.FromTimeSpan(System.TimeSpan,System.Int16)">
            <summary>
            Returns new <see cref="T:Backdash.Data.FrameSpan"/> for <paramref name="time"/> at specified <paramref name="fps"/>.
            </summary>
        </member>
        <member name="M:Backdash.Data.FrameSpan.FromMilliseconds(System.Double,System.Int16)">
            <summary>
            Returns new <see cref="T:Backdash.Data.FrameSpan"/> for <paramref name="milliseconds"/> at specified <paramref name="fps"/>.
            </summary>
        </member>
        <member name="M:Backdash.Data.FrameSpan.InSeconds(System.Int32,System.Int16)">
            <summary>
            Returns <see cref="T:System.Double"/> seconds for <paramref name="frameCount"/> at specified <paramref name="fps"/>.
            </summary>
        </member>
        <member name="M:Backdash.Data.FrameSpan.GetDuration(System.Int32,System.Int16)">
            <summary>
            Returns <see cref="T:System.TimeSpan"/> for <paramref name="frameCount"/> at specified <paramref name="fps"/>.
            </summary>
        </member>
        <member name="M:Backdash.Data.FrameSpan.Min(Backdash.Data.FrameSpan@,Backdash.Data.FrameSpan@)">
            <summary>Returns the smaller of two <see cref="T:Backdash.Data.FrameSpan"/>.</summary>
        </member>
        <member name="M:Backdash.Data.FrameSpan.Max(Backdash.Data.FrameSpan@,Backdash.Data.FrameSpan@)">
            <summary>Returns the larger of two <see cref="T:Backdash.Data.FrameSpan"/>.</summary>
        </member>
        <member name="M:Backdash.Data.FrameSpan.op_GreaterThan(Backdash.Data.FrameSpan,Backdash.Data.FrameSpan)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.FrameSpan.op_GreaterThanOrEqual(Backdash.Data.FrameSpan,Backdash.Data.FrameSpan)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.FrameSpan.op_LessThan(Backdash.Data.FrameSpan,Backdash.Data.FrameSpan)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.FrameSpan.op_LessThanOrEqual(Backdash.Data.FrameSpan,Backdash.Data.FrameSpan)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.FrameSpan.op_Modulus(Backdash.Data.FrameSpan,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.FrameSpan.op_Addition(Backdash.Data.FrameSpan,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.FrameSpan.op_Subtraction(Backdash.Data.FrameSpan,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.FrameSpan.op_Multiply(Backdash.Data.FrameSpan,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.FrameSpan.op_Multiply(System.Int32,Backdash.Data.FrameSpan)">
            <inheritdoc cref="M:Backdash.Data.FrameSpan.op_Multiply(Backdash.Data.FrameSpan,System.Int32)"/>
        </member>
        <member name="M:Backdash.Data.FrameSpan.op_Addition(Backdash.Data.FrameSpan,Backdash.Data.Frame)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.FrameSpan.op_Subtraction(Backdash.Data.FrameSpan,Backdash.Data.Frame)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.FrameSpan.op_Addition(Backdash.Data.FrameSpan,Backdash.Data.FrameSpan)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Data.FrameSpan.op_Subtraction(Backdash.Data.FrameSpan,Backdash.Data.FrameSpan)">
            <inheritdoc />
        </member>
        <member name="T:Backdash.Data.SynchronizedInput`1">
            <summary>
            Synchronized input result
            </summary>
            <param name="Input">The input value</param>
            <param name="Disconnected">Is <see langword="true"/> if input owner is disconnected</param>
            <typeparam name="T">Type of the Input</typeparam>
        </member>
        <member name="M:Backdash.Data.SynchronizedInput`1.#ctor(`0,System.Boolean)">
            <summary>
            Synchronized input result
            </summary>
            <param name="Input">The input value</param>
            <param name="Disconnected">Is <see langword="true"/> if input owner is disconnected</param>
            <typeparam name="T">Type of the Input</typeparam>
        </member>
        <member name="P:Backdash.Data.SynchronizedInput`1.Input">
            <summary>The input value</summary>
        </member>
        <member name="P:Backdash.Data.SynchronizedInput`1.Disconnected">
            <summary>Is <see langword="true"/> if input owner is disconnected</summary>
        </member>
        <member name="M:Backdash.Data.SynchronizedInput`1.op_Implicit(Backdash.Data.SynchronizedInput{`0})~`0">
            <summary>
            Returns the input associated with this type
            </summary>
        </member>
        <member name="M:Backdash.Data.SynchronizedInput`1.op_Implicit(`0)~Backdash.Data.SynchronizedInput{`0}">
            <summary>
            Returns non-disconnected input associated with this type
            </summary>
        </member>
        <member name="T:Backdash.IRollbackHandler`1">
            <summary>
            The SessionCallbacks contains the callback functions that
            your application must implement.  Backdash will periodically call these
            functions during the game. All callback functions must be implemented.
            </summary>
            <typeparam name="TState">Game state type</typeparam>
        </member>
        <member name="M:Backdash.IRollbackHandler`1.OnSessionStart">
            <summary>
            Called at start of a game session, when all the clients have synchronized.
            You may begin sending inputs with.
            </summary>
        </member>
        <member name="M:Backdash.IRollbackHandler`1.OnSessionClose">
            <summary>
            Called at the end of a game session, before release resources.
            </summary>
        </member>
        <member name="M:Backdash.IRollbackHandler`1.SaveState(Backdash.Data.Frame@,`0@)">
            <summary>
             The client should  copy the entire contents of the current game state into <paramref name="state"/>.
            </summary>
            <param name="frame">The frame which the save occurs.</param>
            <param name="state">The pre-buffered state reference to be filled.</param>
        </member>
        <member name="M:Backdash.IRollbackHandler`1.LoadState(Backdash.Data.Frame@,`0@)">
            <summary>
            Backdash will call this function at the beginning  of a rollback.
            The client must copy the <paramref name="gameState"/> to the game current state.
            </summary>
            <param name="frame">The loading frame</param>
            <param name="gameState">The game state that must be loaded</param>
        </member>
        <member name="M:Backdash.IRollbackHandler`1.ClearState(`0@)">
            <summary>
            Optionally clear the state in buffer before <see cref="M:Backdash.IRollbackHandler`1.SaveState(Backdash.Data.Frame@,`0@)"/>.
            </summary>
        </member>
        <member name="M:Backdash.IRollbackHandler`1.AdvanceFrame">
            <summary>
            Called during a rollback after <see cref="M:Backdash.IRollbackHandler`1.LoadState(Backdash.Data.Frame@,`0@)"/>. You should advance your game
            state by exactly one frame.  Before each frame, call <see cref="M:Backdash.IRollbackSession`1.SynchronizeInputs"/>
            to retrieve the inputs you should use for that frame. After each frame, you should call <see cref="M:Backdash.IRollbackSession`1.AdvanceFrame"/> to notify
            Backdash that you're finished.
            </summary>
        </member>
        <member name="M:Backdash.IRollbackHandler`1.TimeSync(Backdash.Data.FrameSpan)">
            <summary>
            The time synchronization has determined that this client is too far ahead of the other one
            and should slow down to ensure fairness.
            </summary>
            <param name="framesAhead">Indicates how many frames the client is ahead</param>
        </member>
        <member name="M:Backdash.IRollbackHandler`1.OnPeerEvent(Backdash.PlayerHandle,Backdash.PeerEventInfo)">
            <summary>
            Notification that some <see cref="T:Backdash.PeerEvent"/> has happened for a <see cref="T:Backdash.PlayerHandle"/>
            </summary>
            <param name="player">The player owner of the event</param>
            <param name="evt">Event data</param>
        </member>
        <member name="T:Backdash.IRollbackSessionInfo">
            <summary>
            Holds basic session information.
            </summary>
        </member>
        <member name="P:Backdash.IRollbackSessionInfo.CurrentFrame">
            <summary>
            Returns the current session <see cref="T:Backdash.Data.Frame"/>
            </summary>
        </member>
        <member name="P:Backdash.IRollbackSessionInfo.IsSpectating">
            <summary>
            Returns <see langword="true"/> if the client type is <see cref="F:Backdash.PlayerType.Spectator"/>
            </summary>
        </member>
        <member name="P:Backdash.IRollbackSessionInfo.RollbackFrames">
            <summary>
            Returns the number of current rollback frames. <seealso cref="T:Backdash.Data.FrameSpan"/>
            </summary>
        </member>
        <member name="P:Backdash.IRollbackSessionInfo.FramesBehind">
            <summary>
            Returns the number of frames the client is behind. <seealso cref="T:Backdash.Data.FrameSpan"/>
            </summary>
        </member>
        <member name="T:Backdash.IRollbackSession`1">
            <summary>
            Context for a multiplayer game session.
            </summary>
            <typeparam name="TInput">Game input type</typeparam>
        </member>
        <member name="P:Backdash.IRollbackSession`1.NumberOfPlayers">
            <summary>
            Returns the number of player in the current session
            </summary>
        </member>
        <member name="P:Backdash.IRollbackSession`1.NumberOfSpectators">
            <summary>
            Returns the number of spectators in the current session
            </summary>
        </member>
        <member name="M:Backdash.IRollbackSession`1.GetPlayers">
            <summary>
            Returns a list of all input players in the session.
            </summary>
        </member>
        <member name="M:Backdash.IRollbackSession`1.GetSpectators">
            <summary>
            Returns a list of all spectators in the session.
            </summary>
        </member>
        <member name="M:Backdash.IRollbackSession`1.DisconnectPlayer(Backdash.PlayerHandle@)">
            <summary>
            Disconnects a remote player from a game.
            </summary>
        </member>
        <member name="M:Backdash.IRollbackSession`1.AddLocalInput(Backdash.PlayerHandle,`0)">
            <summary>
            Used add local inputs and notify the netcode that they should be transmitted to remote players.
            This must be called once every frame for all player of type <see cref="F:Backdash.PlayerType.Local"/>.
            </summary>
            <param name="player">Player owner of the inputs</param>
            <param name="localInput">The input value</param>
        </member>
        <member name="M:Backdash.IRollbackSession`1.SynchronizeInputs">
            <summary>
            Synchronizes the inputs of the local and remote players into a local buffer
            You should call this before every frame of execution, including those frames which happen during rollback.
            </summary>
        </member>
        <member name="M:Backdash.IRollbackSession`1.GetInput(Backdash.PlayerHandle@)">
            <summary>
            Returns the value of a synchronized input for the requested <paramref name="player"/>.
            This must be called after <see cref="M:Backdash.IRollbackSession`1.SynchronizeInputs"/>
            </summary>
        </member>
        <member name="M:Backdash.IRollbackSession`1.GetInput(System.Int32)">
            <summary>
            Returns the value of a synchronized input for the requested player index.
            This must be called after <see cref="M:Backdash.IRollbackSession`1.SynchronizeInputs"/>
            </summary>
        </member>
        <member name="M:Backdash.IRollbackSession`1.GetInputs(System.Span{Backdash.Data.SynchronizedInput{`0}})">
            <summary>
            Copy the value of all synchronized inputs into the <paramref name="buffer"/>.
            This must be called after <see cref="M:Backdash.IRollbackSession`1.SynchronizeInputs"/>
            </summary>
        </member>
        <member name="M:Backdash.IRollbackSession`1.GetInputs(System.Span{`0})">
            <summary>
            Copy the value of all synchronized inputs into the <paramref name="buffer"/>.
            This must be called after <see cref="M:Backdash.IRollbackSession`1.SynchronizeInputs"/>
            </summary>
        </member>
        <member name="M:Backdash.IRollbackSession`1.BeginFrame">
            <summary>
            Should be called at the start of each frame of your application
            </summary>
        </member>
        <member name="M:Backdash.IRollbackSession`1.AdvanceFrame">
            <summary>
            Should be called at the end of each frame of your application and also in <see cref="M:Backdash.IRollbackHandler`1.AdvanceFrame"/>.
            </summary>
        </member>
        <member name="M:Backdash.IRollbackSession`1.GetPlayerStatus(Backdash.PlayerHandle@)">
            <summary>
            Returns connection status of a player.
            </summary>
        </member>
        <member name="M:Backdash.IRollbackSession`1.GetNetworkStatus(Backdash.PlayerHandle@,Backdash.PeerNetworkStats@)">
            <summary>
            Gets statistics and information about a player into <paramref name="info"/>.
            Returns <see langword="false"/> if the request player is not connected or synchronized.
            </summary>
        </member>
        <member name="M:Backdash.IRollbackSession`1.SetFrameDelay(Backdash.PlayerHandle,System.Int32)">
            <summary>
            Change the amount of delay frames for local input.
            </summary>
            <param name="player"></param>
            <param name="delayInFrames"></param>
        </member>
        <member name="T:Backdash.IRollbackSession`2">
            <summary>
            Context for a multiplayer game session.
            </summary>
            <typeparam name="TInput">Game input type</typeparam>
            <typeparam name="TState">Game state type</typeparam>
        </member>
        <member name="M:Backdash.IRollbackSession`2.AddPlayer(Backdash.Player)">
            <summary>
            Add the <paramref name="player"/> into current session.
            Usually an instance of <see cref="T:Backdash.LocalPlayer"/>, <see cref="T:Backdash.RemotePlayer"/> or <see cref="T:Backdash.Spectator"/>
            </summary>
            <param name="player"></param>
            <returns><see cref="F:Backdash.ResultCode.Ok"/> if success.</returns>
        </member>
        <member name="M:Backdash.IRollbackSession`2.AddPlayers(System.Collections.Generic.IReadOnlyList{Backdash.Player})">
            <summary>
            Add a list of <see name="Player"/> into current session.
            Usually instances of <see cref="T:Backdash.LocalPlayer"/>, <see cref="T:Backdash.RemotePlayer"/> or <see cref="T:Backdash.Spectator"/>
            </summary>
            <returns>A equivalent <see cref="T:Backdash.ResultCode"/> list.</returns>
        </member>
        <member name="M:Backdash.IRollbackSession`2.Start(System.Threading.CancellationToken)">
            <summary>
            Starts the background work for the session
            (Socket receiver, input queue, peer synchronization, etc).
            </summary>
        </member>
        <member name="M:Backdash.IRollbackSession`2.WaitToStop(System.Threading.CancellationToken)">
            <summary>
            Waits the session background work to finish.
            </summary>
        </member>
        <member name="M:Backdash.IRollbackSession`2.SetHandler(Backdash.IRollbackHandler{`1})">
            <summary>
            Set the handler for the current session.
            The client must call this before <see cref="M:Backdash.IRollbackSession`2.Start(System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="T:Backdash.Network.Client.IPeerClient`1">
            <summary>
            Client for peer communication
            </summary>
        </member>
        <member name="M:Backdash.Network.Client.IPeerClient`1.SendTo(System.Net.SocketAddress,`0,System.Threading.CancellationToken)">
            <summary>
            Send Message to peer
            </summary>
        </member>
        <member name="M:Backdash.Network.Client.IPeerClient`1.SendTo(System.Net.SocketAddress,`0,System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Send Message to peer
            </summary>
        </member>
        <member name="M:Backdash.Network.Client.IPeerClient`1.StartReceiving(System.Threading.CancellationToken)">
            <summary>
            Start receiving messages
            </summary>
        </member>
        <member name="T:Backdash.Network.Client.PeerClientFactory">
            <summary>
            Create new instances of <see cref="T:Backdash.Network.Client.IPeerClient`1"/>
            </summary>
        </member>
        <member name="M:Backdash.Network.Client.PeerClientFactory.Create``1(Backdash.Network.Client.IPeerSocket,Backdash.Network.Client.IPeerObserver{``0},Backdash.Serialization.IBinarySerializer{``0},System.Int32)">
            <summary>
             Creates new <see cref="T:Backdash.Network.Client.IPeerClient`1"/>
            </summary>
        </member>
        <member name="T:Backdash.Network.Client.IPeerObserver`1">
            <summary>
            Observe a <see cref="T:Backdash.Network.Client.IPeerClient`1"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Backdash.Network.Client.IPeerObserver`1.OnPeerMessage(`0,System.Net.SocketAddress,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Handle new message from peer
            </summary>
        </member>
        <member name="T:Backdash.Network.Client.IPeerSocket">
            <summary>
            Socket abstraction over peers
            </summary>
        </member>
        <member name="P:Backdash.Network.Client.IPeerSocket.AddressFamily">
            <inheritdoc cref="P:System.Net.Sockets.Socket.AddressFamily" />
        </member>
        <member name="P:Backdash.Network.Client.IPeerSocket.Port">
            <summary>
            Binding port
            </summary>
        </member>
        <member name="M:Backdash.Network.Client.IPeerSocket.ReceiveFromAsync(System.Memory{System.Byte},System.Net.SocketAddress,System.Threading.CancellationToken)">
            <summary>
            Receive bytes from specified remote host
            </summary>
        </member>
        <member name="M:Backdash.Network.Client.IPeerSocket.SendToAsync(System.ReadOnlyMemory{System.Byte},System.Net.SocketAddress,System.Threading.CancellationToken)">
            <summary>
            Sends data to the specified remote host.
            </summary>
        </member>
        <member name="T:Backdash.Network.Client.IPeerSocketFactory">
            <summary>
            Factory for peer sockets
            </summary>
        </member>
        <member name="M:Backdash.Network.Client.IPeerSocketFactory.Create(System.Int32,Backdash.RollbackOptions)">
            <summary>
            Creates instance of <see cref="T:Backdash.Network.Client.IPeerSocket"/>
            </summary>
        </member>
        <member name="T:Backdash.Network.Client.UdpSocket">
            <summary>
            UDP specialized socket interface.
            </summary>
        </member>
        <member name="P:Backdash.Network.Client.UdpSocket.Port">
            <summary>
            Gets the main bind port of the Socket.
            </summary>
        </member>
        <member name="P:Backdash.Network.Client.UdpSocket.AddressFamily">
            <inheritdoc cref="P:System.Net.Sockets.Socket.AddressFamily" />
        </member>
        <member name="M:Backdash.Network.Client.UdpSocket.#ctor(System.Net.IPEndPoint)">
            <summary>
            Initialize and bind a new <see cref="T:Backdash.Network.Client.UdpSocket"/>.
            </summary>
            <param name="bindEndpoint">Local socket binding.</param>
            <exception cref="T:Backdash.Core.NetcodeException">Throws if the <see cref="P:Backdash.Network.Client.UdpSocket.AddressFamily"/> of <see cref="T:System.Net.IPAddress"/> in <paramref name="bindEndpoint"/>
            is not <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork"/> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6"/>> </exception>
        </member>
        <member name="M:Backdash.Network.Client.UdpSocket.#ctor(System.Net.IPAddress,System.Int32)">
            <inheritdoc  />
        </member>
        <member name="M:Backdash.Network.Client.UdpSocket.#ctor(System.Int32,System.Boolean)">
            <inheritdoc  />
        </member>
        <member name="M:Backdash.Network.Client.UdpSocket.#ctor(System.String,System.Int32,System.Net.Sockets.AddressFamily)">
            <inheritdoc  />
        </member>
        <member name="M:Backdash.Network.Client.UdpSocket.GetDnsIpAddress(System.String,System.Net.Sockets.AddressFamily)">
            <summary>
            Returns the Internet Protocol (IP) addresses for the specified host and <see cref="P:Backdash.Network.Client.UdpSocket.AddressFamily"/>.
            </summary>
            <exception cref="T:Backdash.Core.NetcodeException"></exception>
        </member>
        <member name="M:Backdash.Network.Client.UdpSocket.ReceiveFromAsync(System.Memory{System.Byte},System.Net.SocketAddress,System.Threading.CancellationToken)">
            <summary>
            Receives a datagram into the data buffer, using the specified SocketFlags, and stores the endpoint.
            </summary>
            <param name="buffer">The buffer for the received data.</param>
            <param name="address"> A <see cref="T:System.Net.SocketAddress"/> instance that gets updated with the value of the remote peer when this method returns.</param>
            <param name="cancellationToken">A cancellation token that can be used to signal the asynchronous operation should be canceled.</param>
            <returns>An asynchronous task that completes with a <see cref="T:System.Net.Sockets.SocketReceiveFromResult"/> containing the number of bytes received and the endpoint of the sending host.</returns>
        </member>
        <member name="M:Backdash.Network.Client.UdpSocket.ReceiveAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Receives data and returns the endpoint of the sending host.
            </summary>
            <param name="buffer">The buffer for the received data.</param>
            <param name="cancellationToken">A cancellation token that can be used to signal the asynchronous operation should be canceled.</param>
            <returns>An asynchronous task that completes with a <see cref="T:System.Net.Sockets.SocketReceiveFromResult"/> containing the number of bytes received and the endpoint of the sending host.</returns>
        </member>
        <member name="M:Backdash.Network.Client.UdpSocket.SendToAsync(System.ReadOnlyMemory{System.Byte},System.Net.SocketAddress,System.Threading.CancellationToken)">
            <summary>
            Sends data to the specified remote host.
            </summary>
            <param name="buffer">The buffer for the data to send.</param>
            <param name="socketAddress">The remote host to which to send the data.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the asynchronous operation.</param>
            <returns>An asynchronous task that completes with the number of bytes sent.</returns>
        </member>
        <member name="M:Backdash.Network.Client.UdpSocket.SendToAsync(System.ReadOnlyMemory{System.Byte},System.Net.EndPoint,System.Threading.CancellationToken)">
            <summary>
            Sends data to the specified remote host.
            </summary>
            <param name="buffer">The buffer for the data to send.</param>
            <param name="remoteEndPoint">The remote host to which to send the data.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the asynchronous operation.</param>
            <returns>An asynchronous task that completes with the number of bytes sent.</returns>
        </member>
        <member name="M:Backdash.Network.Client.UdpSocket.Dispose">
            <inheritdoc  />
        </member>
        <member name="M:Backdash.Network.Client.UdpSocket.Close">
            <inheritdoc cref="M:System.Net.Sockets.Socket.Close" />
        </member>
        <member name="T:Backdash.Network.DelayStrategy">
            <summary>
            Jitter delay strategy
            </summary>
        </member>
        <member name="F:Backdash.Network.DelayStrategy.Constant">
            <summary>Constant delay</summary>
        </member>
        <member name="F:Backdash.Network.DelayStrategy.Gaussian">
            <summary>Random gaussian delay</summary>
        </member>
        <member name="F:Backdash.Network.DelayStrategy.ContinuousUniform">
            <summary>Random continuous delay</summary>
        </member>
        <member name="T:Backdash.Network.Endianness">
            <summary>
            Defines a endianness value
            </summary>
        </member>
        <member name="F:Backdash.Network.Endianness.LittleEndian">
            <summary>Little endian byte order</summary>
        </member>
        <member name="F:Backdash.Network.Endianness.BigEndian">
            <summary>Big endian byte order</summary>
        </member>
        <member name="T:Backdash.Network.PlayerConnectionStatus">
            <summary>
            Player Connection Status
            </summary>
        </member>
        <member name="F:Backdash.Network.PlayerConnectionStatus.Unknown">
            <summary>Unknown or invalid player status</summary>
        </member>
        <member name="F:Backdash.Network.PlayerConnectionStatus.Local">
            <summary>Local player</summary>
        </member>
        <member name="F:Backdash.Network.PlayerConnectionStatus.Syncing">
            <summary>Syncing remote player</summary>
        </member>
        <member name="F:Backdash.Network.PlayerConnectionStatus.Connected">
            <summary>Connected remote player</summary>
        </member>
        <member name="F:Backdash.Network.PlayerConnectionStatus.Disconnected">
            <summary>Disconnected remote player</summary>
        </member>
        <member name="T:Backdash.Network.Protocol.ProtocolOptions">
            <summary>
            Network protocol configuration.
            </summary>
        </member>
        <member name="P:Backdash.Network.Protocol.ProtocolOptions.UdpPacketBufferSize">
            <summary>
            Number of bytes used on the <see cref="T:Backdash.Network.Client.UdpSocket"/> message buffer.
            </summary>
            <inheritdoc cref="F:Backdash.Core.Default.UdpPacketBufferSize"/>
        </member>
        <member name="P:Backdash.Network.Protocol.ProtocolOptions.MaxPendingInputs">
            <summary>
            Max allowed pending inputs in sending queue. When reached <see cref="M:Backdash.IRollbackSession`1.AddLocalInput(Backdash.PlayerHandle,`0)"/>
            returns <see cref="F:Backdash.ResultCode.InputDropped"/>.
            </summary>
            <inheritdoc cref="F:Backdash.Core.Default.MaxPendingInputs"/>
        </member>
        <member name="P:Backdash.Network.Protocol.ProtocolOptions.MaxPackageQueue">
            <summary>
            Max allowed pending UDP output messages. When reached removes and ignores the oldest package in the queue
            in order to make room for the new package.
            </summary>
            <inheritdoc cref="F:Backdash.Core.Default.MaxPackageQueue"/>
        </member>
        <member name="P:Backdash.Network.Protocol.ProtocolOptions.NumberOfSyncRoundtrips">
            <summary>
            Number of synchronization roundtrips to consider two clients synchronized.
            </summary>
            <inheritdoc cref="F:Backdash.Core.Default.NumberOfSyncPackets"/>
        </member>
        <member name="P:Backdash.Network.Protocol.ProtocolOptions.MaxSequenceDistance">
            <summary>
            Distance to check out of order packets.
            </summary>
            <inheritdoc cref="F:Backdash.Core.Default.MaxSeqDistance"/>
        </member>
        <member name="P:Backdash.Network.Protocol.ProtocolOptions.MaxSyncRetries">
            <summary>
            Total number of synchronization request retries. When reached,
            session will dispatch the <see cref="F:Backdash.PeerEvent.SynchronizationFailure"/> event.
            </summary>
            <inheritdoc cref="F:Backdash.Core.Default.MaxSyncRetries"/>
        </member>
        <member name="P:Backdash.Network.Protocol.ProtocolOptions.NetworkLatency">
            <summary>
            Forced network packet sending latency for the current peer.
            This value is processed using <see cref="P:Backdash.Network.Protocol.ProtocolOptions.DelayStrategy"/>.
            </summary>
            <value>Defaults to <see cref="F:System.TimeSpan.Zero"/></value>
            <seealso cref="T:Backdash.Network.DelayStrategy"/>
        </member>
        <member name="P:Backdash.Network.Protocol.ProtocolOptions.DelayStrategy">
            <summary>
            Strategy for applying delay to sending packages, forcing latency.
            When <see cref="P:Backdash.Network.Protocol.ProtocolOptions.NetworkLatency"/> is <see cref="F:System.TimeSpan.Zero"/> this is ignored.
            </summary>
            <value>Defaults to <see cref="F:Backdash.Network.DelayStrategy.Gaussian"/></value>
            <seealso cref="P:Backdash.Network.Protocol.ProtocolOptions.NetworkLatency"/>
            <seealso cref="T:Backdash.Network.DelayStrategy"/>
        </member>
        <member name="P:Backdash.Network.Protocol.ProtocolOptions.LogNetworkStats">
            <summary>
            When true, session log network stats periodically.
            </summary>
            <value>Defaults to <see lanword="false"/></value>
        </member>
        <member name="P:Backdash.Network.Protocol.ProtocolOptions.DisconnectNotifyStart">
            <summary>
            The time to wait before the first <see cref="F:Backdash.PeerEvent.ConnectionInterrupted"/> timeout will be sent.
            </summary>
            <inheritdoc cref="F:Backdash.Core.Default.DisconnectNotifyStart"/>
        </member>
        <member name="P:Backdash.Network.Protocol.ProtocolOptions.DisconnectTimeout">
            <summary>
            The session will automatically disconnect from a remote peer if it has not received a packet in the timeout window.
            You will be notified of the disconnect via <see cref="F:Backdash.PeerEvent.Disconnected"/> event.
            </summary>
            <inheritdoc cref="F:Backdash.Core.Default.DisconnectTimeout"/>
        </member>
        <member name="P:Backdash.Network.Protocol.ProtocolOptions.ShutdownTime">
            <summary>
            The time to wait before end the session.
            </summary>
            <inheritdoc cref="F:Backdash.Core.Default.UdpShutdownTime"/>
        </member>
        <member name="P:Backdash.Network.Protocol.ProtocolOptions.SyncRetryInterval">
            <summary>
            The time to wait before resend synchronization retries after the first.
            </summary>
            <inheritdoc cref="F:Backdash.Core.Default.SyncRetryInterval"/>
            <seealso cref="P:Backdash.Network.Protocol.ProtocolOptions.SyncFirstRetryInterval"/>
        </member>
        <member name="P:Backdash.Network.Protocol.ProtocolOptions.SyncFirstRetryInterval">
            <summary>
            The time to wait before resend the first synchronization request retry.
            </summary>
            <inheritdoc cref="F:Backdash.Core.Default.SyncFirstRetryInterval"/>
            <seealso cref="P:Backdash.Network.Protocol.ProtocolOptions.SyncRetryInterval"/>
        </member>
        <member name="P:Backdash.Network.Protocol.ProtocolOptions.KeepAliveInterval">
            <summary>
            When the time from the last send package until now is greater then this, sends a keep alive packets.
            </summary>
            <inheritdoc cref="F:Backdash.Core.Default.KeepAliveInterval"/>
        </member>
        <member name="P:Backdash.Network.Protocol.ProtocolOptions.QualityReportInterval">
            <summary>
            The time to wait before send the next quality report package (determines ping).
            </summary>
            <inheritdoc cref="F:Backdash.Core.Default.QualityReportInterval"/>
        </member>
        <member name="P:Backdash.Network.Protocol.ProtocolOptions.NetworkStatsInterval">
            <summary>
            The time to wait before recalculate network statistics.
            </summary>
            <inheritdoc cref="F:Backdash.Core.Default.NetworkStatsInterval"/>
            <seealso cref="T:Backdash.PeerNetworkStats"/>
        </member>
        <member name="P:Backdash.Network.Protocol.ProtocolOptions.ResendInputInterval">
            <summary>
            When the time from the last send input until now is greater then this, resends pending inputs.
            </summary>
            <inheritdoc cref="F:Backdash.Core.Default.ResendInputInterval"/>
        </member>
        <member name="T:Backdash.PeerEvent">
            <summary>
            Peer event type
            </summary>
        </member>
        <member name="F:Backdash.PeerEvent.Connected">
            <summary>Handshake with the game running on the other side of the network has been completed.</summary>
        </member>
        <member name="F:Backdash.PeerEvent.Synchronizing">
            <summary>
            Beginning the synchronization process with the client on the other end of the networking.
            The <see cref="P:Backdash.SynchronizingEventInfo.TotalSteps"/> and <see cref="P:Backdash.SynchronizingEventInfo.CurrentStep"/> fields
            in the <see cref="T:Backdash.SynchronizingEventInfo"/> struct of the <see cref="P:Backdash.PeerEventInfo.Synchronizing"/> object
            indicate the progress.
            </summary>
        </member>
        <member name="F:Backdash.PeerEvent.Synchronized">
            <summary>
            The synchronization with this peer has finished.
            </summary>
        </member>
        <member name="F:Backdash.PeerEvent.SynchronizationFailure">
            <summary>
            The synchronization with this peer has fail.
            </summary>
        </member>
        <member name="F:Backdash.PeerEvent.Disconnected">
            <summary>
            The network connection on the other end of the network has closed.
            </summary>
        </member>
        <member name="F:Backdash.PeerEvent.ConnectionInterrupted">
            <summary>
            The network connection on the other end is not responding for <see cref="P:Backdash.Network.Protocol.ProtocolOptions.DisconnectNotifyStart"/>.
            The <see cref="P:Backdash.ConnectionInterruptedEventInfo.DisconnectTimeout"/> field in the <see cref="T:Backdash.SynchronizingEventInfo"/>
            struct of the <see cref="P:Backdash.PeerEventInfo.ConnectionInterrupted"/> object contains the current connection timeout
            which is the difference between <see cref="P:Backdash.Network.Protocol.ProtocolOptions.DisconnectTimeout"/> and <see cref="P:Backdash.Network.Protocol.ProtocolOptions.DisconnectNotifyStart"/>.
            </summary>
        </member>
        <member name="F:Backdash.PeerEvent.ConnectionResumed">
            <summary>
            The network connection on the other end of the network not responding for <see cref="P:Backdash.Network.Protocol.ProtocolOptions.DisconnectNotifyStart"/>.
            </summary>
        </member>
        <member name="T:Backdash.PeerEventInfo">
            <summary>
            Data structure for <see cref="T:Backdash.PeerEventInfo"/> notifications.
            <seealso cref="M:Backdash.IRollbackHandler`1.OnPeerEvent(Backdash.PlayerHandle,Backdash.PeerEventInfo)"/>
            </summary>
            <param name="type">Event notification type</param>
        </member>
        <member name="M:Backdash.PeerEventInfo.#ctor(Backdash.PeerEvent)">
            <summary>
            Data structure for <see cref="T:Backdash.PeerEventInfo"/> notifications.
            <seealso cref="M:Backdash.IRollbackHandler`1.OnPeerEvent(Backdash.PlayerHandle,Backdash.PeerEventInfo)"/>
            </summary>
            <param name="type">Event notification type</param>
        </member>
        <member name="P:Backdash.PeerEventInfo.Type">
            <summary>
            Event type.
            </summary>
        </member>
        <member name="P:Backdash.PeerEventInfo.Synchronizing">
            <summary>
            Data for <see cref="F:Backdash.PeerEvent.Synchronizing"/> event.
            </summary>
        </member>
        <member name="P:Backdash.PeerEventInfo.Synchronized">
            <summary>
            Data for <see cref="F:Backdash.PeerEvent.Synchronized"/> event.
            </summary>
        </member>
        <member name="P:Backdash.PeerEventInfo.ConnectionInterrupted">
            <summary>
            Data for <see cref="F:Backdash.PeerEvent.ConnectionInterrupted"/> event.
            </summary>
        </member>
        <member name="M:Backdash.PeerEventInfo.ToString">
            <inheritdoc />
        </member>
        <member name="M:Backdash.PeerEventInfo.TryFormat(System.Span{System.Byte},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="T:Backdash.SynchronizingEventInfo">
            <summary>
            Data for <see cref="F:Backdash.PeerEvent.Synchronizing"/> event.
            </summary>
            <param name="CurrentStep">Current synchronizing step.</param>
            <param name="TotalSteps">Total synchronization steps</param>
        </member>
        <member name="M:Backdash.SynchronizingEventInfo.#ctor(System.Int32,System.Int32)">
            <summary>
            Data for <see cref="F:Backdash.PeerEvent.Synchronizing"/> event.
            </summary>
            <param name="CurrentStep">Current synchronizing step.</param>
            <param name="TotalSteps">Total synchronization steps</param>
        </member>
        <member name="P:Backdash.SynchronizingEventInfo.CurrentStep">
            <summary>Current synchronizing step.</summary>
        </member>
        <member name="P:Backdash.SynchronizingEventInfo.TotalSteps">
            <summary>Total synchronization steps</summary>
        </member>
        <member name="T:Backdash.ConnectionInterruptedEventInfo">
            <summary>
            Data for <see cref="F:Backdash.PeerEvent.ConnectionInterrupted"/> event.
            </summary>
            <param name="DisconnectTimeout">Time to disconnect.</param>
        </member>
        <member name="M:Backdash.ConnectionInterruptedEventInfo.#ctor(System.TimeSpan)">
            <summary>
            Data for <see cref="F:Backdash.PeerEvent.ConnectionInterrupted"/> event.
            </summary>
            <param name="DisconnectTimeout">Time to disconnect.</param>
        </member>
        <member name="P:Backdash.ConnectionInterruptedEventInfo.DisconnectTimeout">
            <summary>Time to disconnect.</summary>
        </member>
        <member name="T:Backdash.SynchronizedEventInfo">
            <summary>
            Data for <see cref="F:Backdash.PeerEvent.Synchronized"/> event.
            </summary>
            <param name="Ping">Current ping</param>
        </member>
        <member name="M:Backdash.SynchronizedEventInfo.#ctor(System.TimeSpan)">
            <summary>
            Data for <see cref="F:Backdash.PeerEvent.Synchronized"/> event.
            </summary>
            <param name="Ping">Current ping</param>
        </member>
        <member name="P:Backdash.SynchronizedEventInfo.Ping">
            <summary>Current ping</summary>
        </member>
        <member name="T:Backdash.PeerNetworkStats">
            <summary>
            Holds current session network stats.
            Calculated in intervals of <see cref="P:Backdash.Network.Protocol.ProtocolOptions.NetworkStatsInterval"/>.
            </summary>
        </member>
        <member name="P:Backdash.PeerNetworkStats.Ping">
            <summary>Current roundtrip ping time</summary>
        </member>
        <member name="P:Backdash.PeerNetworkStats.LocalFramesBehind">
            <summary>Remote frame advantage</summary>
        </member>
        <member name="P:Backdash.PeerNetworkStats.RemoteFramesBehind">
            <summary>Local frame advantage</summary>
        </member>
        <member name="P:Backdash.PeerNetworkStats.PendingInputCount">
            <summary>Number of pending queued inputs</summary>
        </member>
        <member name="P:Backdash.PeerNetworkStats.LastAckedFrame">
            <summary>Last acknowledged frame</summary>
        </member>
        <member name="P:Backdash.PeerNetworkStats.Send">
            <summary>Packages sent info</summary>
        </member>
        <member name="P:Backdash.PeerNetworkStats.Received">
            <summary>Packages received info</summary>
        </member>
        <member name="T:Backdash.PeerNetworkStats.PackagesInfo">
            <summary>
            Hold package traffic data
            </summary>
        </member>
        <member name="P:Backdash.PeerNetworkStats.PackagesInfo.LastTime">
            <summary>Last package time</summary>
        </member>
        <member name="P:Backdash.PeerNetworkStats.PackagesInfo.TotalBytes">
            <summary>Total transferred bytes</summary>
        </member>
        <member name="P:Backdash.PeerNetworkStats.PackagesInfo.Count">
            <summary>Number of packages</summary>
        </member>
        <member name="P:Backdash.PeerNetworkStats.PackagesInfo.PackagesPerSecond">
            <summary>Packages per second</summary>
        </member>
        <member name="P:Backdash.PeerNetworkStats.PackagesInfo.LastFrame">
            <summary>Last package frame</summary>
        </member>
        <member name="P:Backdash.PeerNetworkStats.PackagesInfo.Bandwidth">
            <summary>Total used bandwidth</summary>
        </member>
        <member name="T:Backdash.Player">
            <summary>
            Holds data of a player to be added to <see cref="T:Backdash.IRollbackSession`1"/>.
            </summary>
        </member>
        <member name="P:Backdash.Player.Handle">
            <summary>
            Player handler, used to identify any player in session.
            </summary>
        </member>
        <member name="P:Backdash.Player.Type">
            <inheritdoc cref="F:Backdash.PlayerHandle.Type"/>
        </member>
        <member name="P:Backdash.Player.Number">
            <inheritdoc cref="F:Backdash.PlayerHandle.Number"/>
        </member>
        <member name="M:Backdash.Player.IsSpectator">
            <inheritdoc cref="M:Backdash.PlayerHandle.IsSpectator"/>
        </member>
        <member name="M:Backdash.Player.IsRemote">
            <inheritdoc cref="M:Backdash.PlayerHandle.IsRemote"/>
        </member>
        <member name="M:Backdash.Player.IsLocal">
            <inheritdoc cref="M:Backdash.PlayerHandle.IsLocal"/>
        </member>
        <member name="M:Backdash.Player.ToString">
            <inheritdoc cref="M:Backdash.PlayerHandle.ToString"/>
        </member>
        <member name="M:Backdash.Player.Equals(Backdash.Player)">
            <inheritdoc/>
        </member>
        <member name="M:Backdash.Player.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Backdash.Player.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Backdash.Player.op_Equality(Backdash.Player,Backdash.Player)">
            <inheritdoc/>
        </member>
        <member name="M:Backdash.Player.op_Inequality(Backdash.Player,Backdash.Player)">
            <inheritdoc/>
        </member>
        <member name="T:Backdash.LocalPlayer">
            <summary>
            Holds data for a new player of type <see cref="F:Backdash.PlayerType.Local"/>.
            </summary>
            <param name="playerNumber">Player number (starting from <c>1</c>)</param>
        </member>
        <member name="M:Backdash.LocalPlayer.#ctor(System.Int32)">
            <summary>
            Holds data for a new player of type <see cref="F:Backdash.PlayerType.Local"/>.
            </summary>
            <param name="playerNumber">Player number (starting from <c>1</c>)</param>
        </member>
        <member name="T:Backdash.RemotePlayer">
            <summary>
            Holds data for a new player of type <see cref="F:Backdash.PlayerType.Remote"/>.
            </summary>
            <param name="playerNumber">Player number (starting from <c>1</c>)</param>
            <param name="endpoint">Player IP Endpoint <see cref="T:System.Net.IPEndPoint"/></param>
        </member>
        <member name="M:Backdash.RemotePlayer.#ctor(System.Int32,System.Net.IPEndPoint)">
            <summary>
            Holds data for a new player of type <see cref="F:Backdash.PlayerType.Remote"/>.
            </summary>
            <param name="playerNumber">Player number (starting from <c>1</c>)</param>
            <param name="endpoint">Player IP Endpoint <see cref="T:System.Net.IPEndPoint"/></param>
        </member>
        <member name="M:Backdash.RemotePlayer.#ctor(System.Int32,System.Net.IPAddress,System.Int32)">
            <summary>
            Initialize new <see cref="T:Backdash.RemotePlayer"/>
            </summary>
            <param name="playerNumber">Player number</param>
            <param name="ipAddress">Player IP Address</param>
            <param name="port">Player remote port number</param>
        </member>
        <member name="P:Backdash.RemotePlayer.EndPoint">
            <summary>
            Player network endpoint
            </summary>
        </member>
        <member name="T:Backdash.Spectator">
            <summary>
            Holds data for a new player of type <see cref="F:Backdash.PlayerType.Spectator"/>.
            </summary>
            <param name="endpoint">Player IP Endpoint <see cref="T:System.Net.IPEndPoint"/></param>
        </member>
        <member name="M:Backdash.Spectator.#ctor(System.Net.IPEndPoint)">
            <summary>
            Holds data for a new player of type <see cref="F:Backdash.PlayerType.Spectator"/>.
            </summary>
            <param name="endpoint">Player IP Endpoint <see cref="T:System.Net.IPEndPoint"/></param>
        </member>
        <member name="M:Backdash.Spectator.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Initialize new <see cref="T:Backdash.Spectator"/>
            </summary>
            <param name="ipAddress">Player IP Address</param>
            <param name="port">Player remote port number</param>
        </member>
        <member name="P:Backdash.Spectator.EndPoint">
            <summary>
            Player network endpoint
            </summary>
        </member>
        <member name="T:Backdash.PlayerHandle">
            <summary>
            Session player identification .
            </summary>
        </member>
        <member name="F:Backdash.PlayerHandle.Number">
            <summary>
            Player number (starting from <c>1</c>)
            </summary>
        </member>
        <member name="F:Backdash.PlayerHandle.Type">
            <summary>
            Player type
            </summary>
        </member>
        <member name="P:Backdash.PlayerHandle.Index">
            <summary>
            Player number (starting from <c>0</c>)
            </summary>
        </member>
        <member name="M:Backdash.PlayerHandle.IsSpectator">
            <summary>
            Returns <see langword="true"/> if player is <see cref="F:Backdash.PlayerType.Spectator"/>
            </summary>
        </member>
        <member name="M:Backdash.PlayerHandle.IsRemote">
            <summary>
            Returns <see langword="true"/> if player is <see cref="F:Backdash.PlayerType.Remote"/>
            </summary>
        </member>
        <member name="M:Backdash.PlayerHandle.IsLocal">
            <summary>
            Returns <see langword="true"/> if player is <see cref="F:Backdash.PlayerType.Local"/>
            </summary>
        </member>
        <member name="M:Backdash.PlayerHandle.ToString">
            <inheritdoc />
        </member>
        <member name="M:Backdash.PlayerHandle.Equals(Backdash.PlayerHandle)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.PlayerHandle.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.PlayerHandle.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Backdash.PlayerHandle.op_Equality(Backdash.PlayerHandle,Backdash.PlayerHandle)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.PlayerHandle.op_Inequality(Backdash.PlayerHandle,Backdash.PlayerHandle)">
            <inheritdoc />
        </member>
        <member name="T:Backdash.PlayerType">
            <summary>
            Defines player type.
            </summary>
        </member>
        <member name="F:Backdash.PlayerType.Local">
            <summary>Local player</summary>
        </member>
        <member name="F:Backdash.PlayerType.Remote">
            <summary>Remote player</summary>
        </member>
        <member name="F:Backdash.PlayerType.Spectator">
            <summary>Spectator</summary>
        </member>
        <member name="T:Backdash.ResultCode">
            <summary>
            Results for <see cref="T:Backdash.IRollbackSession`1"/> operations.
            </summary>
        </member>
        <member name="F:Backdash.ResultCode.Ok">
            <summary>Operation succeed.</summary>
        </member>
        <member name="F:Backdash.ResultCode.InvalidPlayerHandle">
            <summary>When <see cref="T:Backdash.PlayerHandle"/> was not valid for session.</summary>
        </member>
        <member name="F:Backdash.ResultCode.PlayerOutOfRange">
            <summary>When <see cref="P:Backdash.PlayerHandle.Index"/> was not known by session.</summary>
        </member>
        <member name="F:Backdash.ResultCode.PredictionThreshold">
            <summary>When emulator reached prediction barrier.</summary>
            <seealso cref="P:Backdash.RollbackOptions.PredictionFrames"/>
            <seealso cref="M:Backdash.IRollbackSession`1.AddLocalInput(Backdash.PlayerHandle,`0)"/>
        </member>
        <member name="F:Backdash.ResultCode.NotSynchronized">
            <summary>The synchronization with peer was not finished.</summary>
        </member>
        <member name="F:Backdash.ResultCode.InRollback">
            <summary>Session is in rollback state.</summary>
        </member>
        <member name="F:Backdash.ResultCode.InputDropped">
            <summary>Unable to send input.</summary>
        </member>
        <member name="F:Backdash.ResultCode.TooManySpectators">
            <summary>Max number of spectators reached.</summary>
            <seealso cref="T:Backdash.RollbackOptions"/>
            <inheritdoc cref="F:Backdash.Core.Max.NumberOfSpectators"/>
        </member>
        <member name="F:Backdash.ResultCode.TooManyPlayers">
            <summary>
            Max number of players reached.
            <seealso cref="T:Backdash.RollbackOptions"/>
            </summary>
            <inheritdoc cref="F:Backdash.Core.Max.NumberOfPlayers"/>
        </member>
        <member name="F:Backdash.ResultCode.AlreadySynchronized">
            <summary>The operations need to requested before synchronization starts.</summary>
            <seealso cref="M:Backdash.IRollbackSession`2.Start(System.Threading.CancellationToken)"/>
        </member>
        <member name="F:Backdash.ResultCode.DuplicatedPlayer">
            <summary>The <see cref="T:Backdash.PlayerHandle"/> is already added to the session.</summary>
        </member>
        <member name="F:Backdash.ResultCode.NotSupported">
            <summary>The current session type not support the requested operation.</summary>
        </member>
        <member name="T:Backdash.RollbackNetcode">
            <summary>
            The session factory used to create new netcode sessions.
            </summary>
             <seealso cref="T:Backdash.IRollbackSession`1"/>
             <seealso cref="T:Backdash.IRollbackSession`2"/>
        </member>
        <member name="M:Backdash.RollbackNetcode.CreateSession``2(System.Int32,Backdash.RollbackOptions,Backdash.SessionServices{``0,``1})">
            <summary>
            Initializes new multiplayer session.
            </summary>
            <param name="port">The <see cref="T:Backdash.Network.Client.UdpSocket"/> port</param>
            <param name="options">Session configuration</param>
            <param name="services">Session customizable dependencies</param>
            <typeparam name="TInput">Game input type</typeparam>
            <typeparam name="TGameState">Game state type</typeparam>
        </member>
        <member name="M:Backdash.RollbackNetcode.CreateSpectatorSession``2(System.Int32,System.Net.IPEndPoint,System.Int32,Backdash.RollbackOptions,Backdash.SessionServices{``0,``1})">
            <summary>
            Initializes new spectator session.
            </summary>
            <param name="port">The <see cref="T:Backdash.Network.Client.UdpSocket"/> port</param>
            <param name="host">The host <see cref="T:System.Net.IPEndPoint"/> to be watched.</param>
            <param name="numberOfPlayers">Session player count</param>
            <param name="options">Session configuration</param>
            <param name="services">Session customizable dependencies</param>
            <typeparam name="TInput">Game input type</typeparam>
            <typeparam name="TGameState">Game state type</typeparam>
        </member>
        <member name="M:Backdash.RollbackNetcode.CreateReplaySession``2(System.Int32,System.Collections.Generic.IReadOnlyList{Backdash.Sync.Input.Confirmed.ConfirmedInputs{``0}},Backdash.SessionServices{``0,``1})">
            <summary>
            Initializes new replay session.
            </summary>
            <param name="numberOfPlayers">Session player count</param>
            <param name="inputs">Inputs to be replayed</param>
            <param name="services">Session customizable dependencies</param>
            <typeparam name="TInput">Game input type</typeparam>
            <typeparam name="TGameState">Game state type</typeparam>
        </member>
        <member name="M:Backdash.RollbackNetcode.CreateSyncTestSession``2(System.Nullable{Backdash.Data.FrameSpan},Backdash.RollbackOptions,Backdash.SessionServices{``0,``1},System.Boolean)">
            <summary>
            Initializes new sync test session.
            </summary>
            <param name="checkDistance">Total forced rollback frames.</param>
            <param name="options">Session configuration</param>
            <param name="services">Session customizable dependencies</param>
            <param name="throwException">If true, throws on state de-synchronization.</param>
            <typeparam name="TInput">Game input type</typeparam>
            <typeparam name="TGameState">Game state type</typeparam>
        </member>
        <member name="T:Backdash.RollbackOptions">
            <summary>
            Configurations for sessions.
            </summary>
             <seealso cref="T:Backdash.RollbackNetcode"/>
             <seealso cref="T:Backdash.IRollbackSession`1"/>
             <seealso cref="T:Backdash.IRollbackSession`2"/>
        </member>
        <member name="P:Backdash.RollbackOptions.SpectatorOffset">
            <summary>
            Offset to be incremented to spectators <see cref="F:Backdash.PlayerHandle.Number"/> when added to session.
            </summary>
            <seealso cref="F:Backdash.PlayerType.Spectator"/>
            <seealso cref="M:Backdash.IRollbackSession`2.AddPlayer(Backdash.Player)"/>
            <inheritdoc cref="F:Backdash.Core.Default.SpectatorOffset"/>
        </member>
        <member name="P:Backdash.RollbackOptions.RecommendationInterval">
            <summary>
            Interval for time synchronization notifications.
            </summary>
            <seealso cref="P:Backdash.RollbackOptions.TimeSync"/>
            <seealso cref="T:Backdash.Sync.TimeSyncOptions"/>
            <inheritdoc cref="F:Backdash.Core.Default.RecommendationInterval"/>
        </member>
        <member name="P:Backdash.RollbackOptions.NetworkEndianness">
            <summary>
            Forces serialization byte order to network order <see cref="F:Backdash.Network.Endianness.BigEndian"/>.
            </summary>
            <seealso cref="T:Backdash.Network.Endianness"/>
            <value>Defaults to <see langword="true"/></value>
        </member>
        <member name="P:Backdash.RollbackOptions.InputQueueLength">
            <summary>
            Max length for player input queues.
            </summary>
            <inheritdoc cref="F:Backdash.Core.Default.InputQueueLength"/>
        </member>
        <member name="P:Backdash.RollbackOptions.SpectatorInputBufferLength">
            <summary>
            Max length for spectators input queues.
            </summary>
            <inheritdoc cref="F:Backdash.Core.Default.InputQueueLength"/>
        </member>
        <member name="P:Backdash.RollbackOptions.PredictionFrames">
            <summary>
            Max allowed prediction frames.
            </summary>
            <seealso cref="F:Backdash.ResultCode.PredictionThreshold"/>
            <inheritdoc cref="F:Backdash.Core.Default.PredictionFrames"/>
        </member>
        <member name="P:Backdash.RollbackOptions.PredictionFramesOffset">
            <summary>
            Value to be incremented on <see cref="P:Backdash.RollbackOptions.PredictionFrames"/> in state store <see cref="M:Backdash.Sync.State.IStateStore`1.Initialize(System.Int32)"/>
            </summary>
            <inheritdoc cref="F:Backdash.Core.Default.PredictionFramesOffset"/>
            <seealso cref="T:Backdash.Sync.State.IStateStore`1"/>
        </member>
        <member name="P:Backdash.RollbackOptions.FrameDelay">
            <summary>
            Amount of frames to delay for local input
            </summary>
            <inheritdoc cref="F:Backdash.Core.Default.FrameDelay"/>
        </member>
        <member name="P:Backdash.RollbackOptions.UseIPv6">
            <summary>
            Config <see cref="T:Backdash.Network.Client.UdpSocket"/> to use IPv6.
            </summary>
            <value>Defaults to <see langword="false"/></value>
        </member>
        <member name="P:Backdash.RollbackOptions.FramesPerSecond">
            <summary>
            Base FPS used to estimate fairness (frame advantage) over peers.
            </summary>
            <inheritdoc cref="F:Backdash.Data.FrameSpan.DefaultFramesPerSecond"/>
        </member>
        <member name="P:Backdash.RollbackOptions.Log">
            <summary>Logging options. <seealso cref="T:Backdash.Core.LogOptions"/></summary>
        </member>
        <member name="P:Backdash.RollbackOptions.TimeSync">
            <summary>Time synchronization options. <seealso cref="T:Backdash.Sync.TimeSyncOptions"/></summary>
        </member>
        <member name="P:Backdash.RollbackOptions.Protocol">
            <summary>Networking Protocol options. <seealso cref="T:Backdash.Network.Protocol.ProtocolOptions"/></summary>
        </member>
        <member name="T:Backdash.Serialization.IBinaryReader`1">
            <summary>
            Binary reader for <typeparamref name="T"/>
            </summary>
            <typeparam name="T">Type to be deserialized.</typeparam>
        </member>
        <member name="M:Backdash.Serialization.IBinaryReader`1.Deserialize(System.ReadOnlySpan{System.Byte},`0@)">
            <summary>
            Deserialize <paramref name="data"/> into <paramref name="value"/>
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="T:Backdash.Serialization.IBinaryWriter`1">
            <summary>
            Binary writer for <typeparamref name="T"/>
            </summary>
            <typeparam name="T">Type to be serialized.</typeparam>
        </member>
        <member name="M:Backdash.Serialization.IBinaryWriter`1.Serialize(`0@,System.Span{System.Byte})">
            <summary>
            Serialize <paramref name="data"/> into <paramref name="buffer"/>
            </summary>
            <param name="data"></param>
            <param name="buffer"></param>
        </member>
        <member name="T:Backdash.Serialization.IBinarySerializer`1">
            <summary>
            Binary serializer for <typeparamref name="T"/>
            </summary>
            <typeparam name="T">Type to be serialized.</typeparam>
        </member>
        <member name="T:Backdash.Serialization.BinarySerializer`1">
            <inheritdoc />
        </member>
        <member name="P:Backdash.Serialization.BinarySerializer`1.Network">
            <inheritdoc cref="P:Backdash.RollbackOptions.NetworkEndianness"/>
        </member>
        <member name="M:Backdash.Serialization.BinarySerializer`1.Serialize(Backdash.Serialization.Buffer.BinarySpanWriter@,`0@)">
            <summary>
            Serialize <paramref name="data"/> using <see cref="T:Backdash.Serialization.Buffer.BinarySpanWriter"/>
            </summary>
            <param name="binaryWriter">Binary writer</param>
            <param name="data">Data to be written</param>
        </member>
        <member name="M:Backdash.Serialization.BinarySerializer`1.Deserialize(Backdash.Serialization.Buffer.BinarySpanReader@,`0@)">
            <summary>
            Deserialize buffer data using <paramref name="binaryReader"/> into <paramref name="result"/>
            </summary>
            <param name="binaryReader">Binary reader</param>
            <param name="result">Reference to be set with the deserialized value.</param>
        </member>
        <member name="T:Backdash.Serialization.Buffer.BinarySpanReader">
            <summary>
            Binary span reader.
            </summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.#ctor(System.ReadOnlySpan{System.Byte},System.Int32@)">
            <summary>
            Initialize a new <see cref="T:Backdash.Serialization.Buffer.BinarySpanReader"/> for <paramref name="buffer"/>
            </summary>
            <param name="buffer">Byte buffer to be read</param>
            <param name="offset">Read offset reference</param>
        </member>
        <member name="P:Backdash.Serialization.Buffer.BinarySpanReader.Endianness">
            <summary>
            Gets or init the value to define which endianness should be used for serialization.
            </summary>
        </member>
        <member name="P:Backdash.Serialization.Buffer.BinarySpanReader.ReadCount">
            <summary>Total read byte count.</summary>
        </member>
        <member name="P:Backdash.Serialization.Buffer.BinarySpanReader.Capacity">
            <summary>Total buffer capacity in bytes.</summary>
        </member>
        <member name="P:Backdash.Serialization.Buffer.BinarySpanReader.FreeCapacity">
            <summary>Available buffer space in bytes</summary>
        </member>
        <member name="P:Backdash.Serialization.Buffer.BinarySpanReader.CurrentBuffer">
            <summary>Returns a <see cref="T:System.Span`1"/> for the current available buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.Advance(System.Int32)">
            <summary>Advance read pointer by <paramref name="count"/>.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadByte">
            <summary>Reads single <see cref="T:System.Byte"/> from buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadByte(System.Span{System.Byte}@)">
            <summary>Reads a span of <see cref="T:System.Byte"/> from buffer into <paramref name="values"/>.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadSByte">
            <summary>Reads single <see cref="T:System.SByte"/> from buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadSByte(System.Span{System.SByte}@)">
            <summary>Reads a span of <see cref="T:System.SByte"/> from buffer into <paramref name="values"/>.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadBoolean">
            <summary>Reads single <see cref="T:System.Boolean"/> from buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadBoolean(System.Span{System.Boolean}@)">
            <summary>Reads a span of <see cref="T:System.Boolean"/> from buffer into <paramref name="values"/>.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadInt16">
            <summary>Reads single <see cref="T:System.Int16"/> from buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadInt16(System.Span{System.Int16}@)">
            <summary>Reads a span of <see cref="T:System.Int16"/> from buffer into <paramref name="values"/>.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadUInt16">
            <summary>Reads single <see cref="T:System.UInt16"/> from buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadUInt16(System.Span{System.UInt16}@)">
            <summary>Reads a span of <see cref="T:System.UInt16"/> from buffer into <paramref name="values"/>.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadChar">
            <summary>Reads single <see cref="T:System.Char"/> from buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadChar(System.Span{System.Char}@)">
            <summary>Reads a span of <see cref="T:System.Char"/> from buffer into <paramref name="values"/>.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadInt32">
            <summary>Reads single <see cref="T:System.Int32"/> from buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadInt32(System.Span{System.Int32}@)">
            <summary>Reads a span of <see cref="T:System.Int32"/> from buffer into <paramref name="values"/>.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadUInt32">
            <summary>Reads single <see cref="T:System.UInt32"/> from buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadUInt32(System.Span{System.UInt32}@)">
            <summary>Reads a span of <see cref="T:System.UInt32"/> from buffer into <paramref name="values"/>.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadInt64">
            <summary>Reads single <see cref="T:System.Int64"/> from buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadInt64(System.Span{System.Int64}@)">
            <summary>Reads a span of <see cref="T:System.Int64"/> from buffer into <paramref name="values"/>.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadUInt64">
            <summary>Reads single <see cref="T:System.UInt64"/> from buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadUInt64(System.Span{System.UInt64}@)">
            <summary>Reads a span of <see cref="T:System.UInt64"/> from buffer into <paramref name="values"/>.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadInt128">
            <summary>Reads single <see cref="T:System.Int128"/> from buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadInt128(System.Span{System.Int128}@)">
            <summary>Reads a span of <see cref="T:System.Int128"/> from buffer into <paramref name="values"/>.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadUInt128">
            <summary>Reads single <see cref="T:System.UInt128"/> from buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadUInt128(System.Span{System.UInt128}@)">
            <summary>Reads a span of <see cref="T:System.UInt128"/> from buffer into <paramref name="values"/>.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadHalf">
            <summary>Reads single <see cref="T:System.Half"/> from buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadSingle">
            <summary>Reads single <see cref="T:System.Single"/> from buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadDouble">
            <summary>Reads single <see cref="T:System.Double"/> from buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadVector2">
            <summary>Reads single <see cref="T:System.Numerics.Vector2"/> from buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadVector3">
            <summary>Reads single <see cref="T:System.Numerics.Vector3"/> from buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadVector4">
            <summary>Reads single <see cref="T:System.Numerics.Vector4"/> from buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadQuaternion">
            <summary>Reads single <see cref="T:System.Numerics.Quaternion"/> from buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadNumber``1">
            <summary>Reads single <see cref="T:System.Numerics.IBinaryInteger`1"/> from buffer.</summary>
            <typeparam name="T">A numeric type that implements <see cref="T:System.Numerics.IBinaryInteger`1"/> and <see cref="T:System.Numerics.IMinMaxValue`1"/>.</typeparam>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadNumber``1(System.Boolean)">
            <summary>Reads single <see cref="T:System.Numerics.IBinaryInteger`1"/> from buffer.</summary>
            <typeparam name="T">A numeric type that implements <see cref="T:System.Numerics.IBinaryInteger`1"/>.</typeparam>
            <param name="isUnsigned">true if source represents an unsigned two's complement number; otherwise, false to indicate it represents a signed two's complement number</param>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanReader.ReadEnum``1">
            <summary>Reads single <see cref="T:System.Enum"/> value from buffer.</summary>
            <typeparam name="T">An enum type.</typeparam>
        </member>
        <member name="T:Backdash.Serialization.Buffer.BinarySpanWriter">
            <summary>
            Binary span writer.
            </summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.#ctor(System.Span{System.Byte}@,System.Int32@)">
            <summary>
            Initialize a new <see cref="T:Backdash.Serialization.Buffer.BinarySpanWriter"/> for <paramref name="buffer"/>
            </summary>
            <param name="buffer">Byte buffer to be written</param>
            <param name="offset">Write offset reference</param>
        </member>
        <member name="P:Backdash.Serialization.Buffer.BinarySpanWriter.Endianness">
            <summary>
            Gets or init the value to define which endianness should be used for serialization.
            </summary>
        </member>
        <member name="P:Backdash.Serialization.Buffer.BinarySpanWriter.WrittenCount">
            <summary>Total written byte count.</summary>
        </member>
        <member name="P:Backdash.Serialization.Buffer.BinarySpanWriter.Capacity">
            <summary>Total buffer capacity in bytes.</summary>
        </member>
        <member name="P:Backdash.Serialization.Buffer.BinarySpanWriter.FreeCapacity">
            <summary>Available buffer space in bytes</summary>
        </member>
        <member name="P:Backdash.Serialization.Buffer.BinarySpanWriter.CurrentBuffer">
            <summary>Returns a <see cref="T:System.Span`1"/> for the current available buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.Advance(System.Int32)">
            <summary>Advance write pointer by <paramref name="count"/>.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.Write(System.Byte@)">
            <summary>Writes single <see cref="T:System.Byte"/> <paramref name="value"/> into buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.Write(System.SByte@)">
            <summary>Writes single <see cref="T:System.SByte"/> <paramref name="value"/> into buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.Write(System.Boolean@)">
            <summary>Writes single <see cref="T:System.Boolean"/> <paramref name="value"/> into buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.Write(System.Int16@)">
            <summary>Writes single <see cref="T:System.Int16"/> <paramref name="value"/> into buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.Write(System.UInt16@)">
            <summary>Writes single <see cref="T:System.UInt16"/> <paramref name="value"/> into buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.Write(System.Int32@)">
            <summary>Writes single <see cref="T:System.Int32"/> <paramref name="value"/> into buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.Write(System.UInt32@)">
            <summary>Writes single <see cref="T:System.UInt32"/> <paramref name="value"/> into buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.Write(System.Char@)">
            <summary>Writes single <see cref="T:System.Char"/> <paramref name="value"/> into buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.Write(System.Int64@)">
            <summary>Writes single <see cref="T:System.Int64"/> <paramref name="value"/> into buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.Write(System.UInt64@)">
            <summary>Writes single <see cref="T:System.UInt64"/> <paramref name="value"/> into buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.Write(System.Int128@)">
            <summary>Writes single <see cref="T:System.Int128"/> <paramref name="value"/> into buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.Write(System.UInt128@)">
            <summary>Writes single <see cref="T:System.UInt128"/> <paramref name="value"/> into buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.Write(System.Half@)">
            <summary>Writes single <see cref="T:System.Half"/> <paramref name="value"/> into buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.Write(System.Single@)">
            <summary>Writes single <see cref="T:System.Single"/> <paramref name="value"/> into buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.Write(System.Double@)">
            <summary>Writes single <see cref="T:System.Double"/> <paramref name="value"/> into buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.Write(System.Numerics.Vector2@)">
            <summary>Writes single <see cref="T:System.Numerics.Vector2"/> <paramref name="value"/> into buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.Write(System.Numerics.Vector3@)">
            <summary>Writes single <see cref="T:System.Numerics.Vector3"/> <paramref name="value"/> into buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.Write(System.Numerics.Vector4@)">
            <summary>Writes single <see cref="T:System.Numerics.Vector4"/> <paramref name="value"/> into buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.Write(System.Numerics.Quaternion@)">
            <summary>Writes single <see cref="T:System.Numerics.Quaternion"/> <paramref name="value"/> into buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.Write(System.ReadOnlySpan{System.Byte}@)">
            <summary>Writes a span of <see cref="T:System.Byte"/> <paramref name="value"/> into buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.Write(System.ReadOnlySpan{System.SByte}@)">
            <summary>Writes a span of <see cref="T:System.SByte"/> <paramref name="value"/> into buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.Write(System.ReadOnlySpan{System.Boolean}@)">
            <summary>Writes a span of <see cref="T:System.Boolean"/> <paramref name="value"/> into buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.Write(System.ReadOnlySpan{System.Int16}@)">
            <summary>Writes a span of <see cref="T:System.Int16"/> <paramref name="value"/> into buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.Write(System.ReadOnlySpan{System.UInt16}@)">
            <summary>Writes a span of <see cref="T:System.UInt16"/> <paramref name="value"/> into buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.Write(System.ReadOnlySpan{System.Char}@)">
            <summary>Writes a span of <see cref="T:System.Char"/> <paramref name="value"/> into buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.Write(System.ReadOnlySpan{System.Int32}@)">
            <summary>Writes a span of <see cref="T:System.Int32"/> <paramref name="value"/> into buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.Write(System.ReadOnlySpan{System.UInt32}@)">
            <summary>Writes a span of <see cref="T:System.UInt32"/> <paramref name="value"/> into buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.Write(System.ReadOnlySpan{System.Int64}@)">
            <summary>Writes a span of <see cref="T:System.Int64"/> <paramref name="value"/> into buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.Write(System.ReadOnlySpan{System.UInt64}@)">
            <summary>Writes a span of <see cref="T:System.UInt64"/> <paramref name="value"/> into buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.Write(System.ReadOnlySpan{System.Int128}@)">
            <summary>Writes a span of <see cref="T:System.Int128"/> <paramref name="value"/> into buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.Write(System.ReadOnlySpan{System.UInt128}@)">
            <summary>Writes a span of <see cref="T:System.UInt128"/> <paramref name="value"/> into buffer.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.Write(System.String@)">
            <summary>Writes an <see cref="T:System.String"/> <paramref name="value"/> into buffer as UTF8.</summary>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.WriteNumber``1(``0@)">
            <summary>Writes a <see cref="T:System.Numerics.IBinaryInteger`1"/> <paramref name="value"/> into buffer.</summary>
            <typeparam name="T">A numeric type that implements <see cref="T:System.Numerics.IBinaryInteger`1"/>.</typeparam>
        </member>
        <member name="M:Backdash.Serialization.Buffer.BinarySpanWriter.WriteEnum``1(``0@)">
            <summary>Writes the <see cref="T:System.Enum"/> <paramref name="enumValue"/> into buffer.</summary>
            <typeparam name="T">An enum type.</typeparam>
        </member>
        <member name="T:Backdash.Serialization.StateSerializerAttribute`1">
            <summary>
            Enable game state serializer source generator for <typeparamref name="TState"/>.
            </summary>
            <typeparam name="TState">Game State Type</typeparam>
        </member>
        <member name="T:Backdash.SessionServices`2">
            <summary>
            Session dependencies.
            </summary>
            <typeparam name="TInput">Input type</typeparam>
            <typeparam name="TGameState">Game state type</typeparam>
        </member>
        <member name="P:Backdash.SessionServices`2.InputSerializer">
            <summary>
            Serializer for session input.
            </summary>
        </member>
        <member name="P:Backdash.SessionServices`2.ChecksumProvider">
            <summary>
            Checksum provider service for session state.
            </summary>
        </member>
        <member name="P:Backdash.SessionServices`2.LogWriter">
            <summary>
            Log writer service for session.
            </summary>
        </member>
        <member name="P:Backdash.SessionServices`2.StateSerializer">
            <summary>
            Binary state serializer for session.
            When set the default <see cref="T:Backdash.Sync.State.IStateStore`1"/> will be <see cref="T:Backdash.Sync.State.Stores.BinaryStateStore`1"/>
            </summary>
        </member>
        <member name="P:Backdash.SessionServices`2.InputGenerator">
            <summary>
            Input generator service for session.
            </summary>
        </member>
        <member name="P:Backdash.SessionServices`2.StateStore">
            <summary>
            State store service for session.
            </summary>
        </member>
        <member name="P:Backdash.SessionServices`2.PeerSocketFactory">
            <summary>
            State store service for session.
            </summary>
        </member>
        <member name="P:Backdash.SessionServices`2.Random">
            <summary>
            Default random service
            </summary>
        </member>
        <member name="P:Backdash.SessionServices`2.InputListener">
            <summary>
            Service to listen for confirmed inputs
            </summary>
        </member>
        <member name="T:Backdash.Sync.Input.Confirmed.ConfirmedInputs`1">
            <summary>
            All confirmed inputs for all players
            </summary>
            <typeparam name="TInput"></typeparam>
        </member>
        <member name="F:Backdash.Sync.Input.Confirmed.ConfirmedInputs`1.Count">
            <summary>
            Number of inputs
            </summary>
        </member>
        <member name="F:Backdash.Sync.Input.Confirmed.ConfirmedInputs`1.Inputs">
            <summary>
            Input array
            </summary>
        </member>
        <member name="M:Backdash.Sync.Input.Confirmed.ConfirmedInputs`1.#ctor">
            <summary>
            Initialized <see cref="T:Backdash.Sync.Input.Confirmed.ConfirmedInputs`1"/> with full size
            </summary>
        </member>
        <member name="M:Backdash.Sync.Input.Confirmed.ConfirmedInputs`1.#ctor(System.ReadOnlySpan{`0})">
            <summary>
            Initialized <see cref="T:Backdash.Sync.Input.Confirmed.ConfirmedInputs`1"/> from span
            </summary>
        </member>
        <member name="T:Backdash.Sync.Input.Confirmed.InputArray`1">
            <summary>
            Array of inputs for all players
            </summary>
            <typeparam name="TInput"></typeparam>
        </member>
        <member name="F:Backdash.Sync.Input.Confirmed.InputArray`1.Capacity">
            <summary>
            Max size of <see cref="T:Backdash.Sync.Input.Confirmed.InputArray`1"/>
            </summary>
            <inheritdoc cref="F:Backdash.Core.Max.NumberOfPlayers"/>
        </member>
        <member name="T:Backdash.Sync.Input.Confirmed.IInputListener`1">
            <summary>
            Listen for confirmed input
            </summary>
        </member>
        <member name="M:Backdash.Sync.Input.Confirmed.IInputListener`1.OnConfirmed(Backdash.Data.Frame@,Backdash.Sync.Input.Confirmed.ConfirmedInputs{`0}@)">
            <summary>
            New confirmed input event handler
            </summary>
        </member>
        <member name="T:Backdash.Sync.Input.IInputGenerator`1">
            <summary>
            Input value provider
            </summary>
            <typeparam name="TInput"></typeparam>
        </member>
        <member name="M:Backdash.Sync.Input.IInputGenerator`1.Generate">
            <summary>
            Returns the next input
            </summary>
        </member>
        <member name="T:Backdash.Sync.Input.RandomInputGenerator`1">
            <summary>
            Random input value provider
            </summary>
            <typeparam name="TInput"></typeparam>
        </member>
        <member name="M:Backdash.Sync.Input.RandomInputGenerator`1.#ctor(System.Random)">
            <summary>
            Initializes new <see cref="T:Backdash.Sync.Input.RandomInputGenerator`1"/>
            </summary>
        </member>
        <member name="M:Backdash.Sync.Input.RandomInputGenerator`1.Generate">
            <inheritdoc />
        </member>
        <member name="T:Backdash.Sync.State.IChecksumProvider`1">
            <summary>
            Provider of checksum values for <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Game state type</typeparam>
        </member>
        <member name="M:Backdash.Sync.State.IChecksumProvider`1.Compute(`0@)">
            <summary>
            Returns the checksum value for <paramref name="value"/>.
            </summary>
            <param name="value"></param>
            <returns><see cref="T:System.Int32"/> checksum value</returns>
        </member>
        <member name="T:Backdash.Sync.State.HashCodeChecksumProvider`1">
            <summary>
            HashCode checksum provider for <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Game state type</typeparam>
        </member>
        <member name="M:Backdash.Sync.State.HashCodeChecksumProvider`1.Compute(`0@)">
            <inheritdoc />
        </member>
        <member name="T:Backdash.Sync.State.EmptyChecksumProvider`1">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Sync.State.EmptyChecksumProvider`1.Compute(`0@)">
            <inheritdoc />
        </member>
        <member name="T:Backdash.Sync.State.IStateStore`1">
            <summary>
            Repository for temporary save and restore game states.
            </summary>
            <typeparam name="TState">Game state type.</typeparam>
        </member>
        <member name="M:Backdash.Sync.State.IStateStore`1.Initialize(System.Int32)">
            <summary>
            Initialize the state buffer with capacity of <paramref name="size"/>
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Backdash.Sync.State.IStateStore`1.Load(Backdash.Data.Frame)">
            <summary>
            Returns a <see cref="T:Backdash.Sync.State.SavedFrame`1" /> for <paramref name="frame"/>.
            </summary>
            <param name="frame">Frame to load.</param>
        </member>
        <member name="M:Backdash.Sync.State.IStateStore`1.Last">
            <summary>
            Returns last <see cref="T:Backdash.Sync.State.SavedFrame`1" />.
            </summary>
        </member>
        <member name="M:Backdash.Sync.State.IStateStore`1.GetCurrent">
            <summary>
            Returns current <see cref="T:Backdash.Sync.State.SavedFrame`1" />.
            </summary>
        </member>
        <member name="M:Backdash.Sync.State.IStateStore`1.SaveCurrent(Backdash.Data.Frame@,System.Int32@)">
            <summary>
            Save current state for <paramref name="frame"/> with <paramref name="checksum"/> value.
            </summary>
            <param name="frame">frame to save</param>
            <param name="checksum">checksum for current state</param>
            <returns></returns>
        </member>
        <member name="T:Backdash.Sync.State.SavedFrame`1">
            <summary>
            Represents a save-state at specific frame.
            </summary>
            <param name="Frame">Saved frame number</param>
            <param name="GameState">Game state on <paramref name="Frame"/></param>
            <param name="Checksum">Checksum of state</param>
            <typeparam name="TState">Game state type</typeparam>
        </member>
        <member name="M:Backdash.Sync.State.SavedFrame`1.#ctor(Backdash.Data.Frame,`0,System.Int32)">
            <summary>
            Represents a save-state at specific frame.
            </summary>
            <param name="Frame">Saved frame number</param>
            <param name="GameState">Game state on <paramref name="Frame"/></param>
            <param name="Checksum">Checksum of state</param>
            <typeparam name="TState">Game state type</typeparam>
        </member>
        <member name="F:Backdash.Sync.State.SavedFrame`1.Frame">
            <summary>Saved frame number</summary>
        </member>
        <member name="F:Backdash.Sync.State.SavedFrame`1.GameState">
            <summary>Saved game state</summary>
        </member>
        <member name="F:Backdash.Sync.State.SavedFrame`1.Checksum">
            <summary>Saved checksum</summary>
        </member>
        <member name="T:Backdash.Sync.State.Stores.ArrayStateStore`1">
            <summary>
            Array pool store for temporary save and restore game states.
            </summary>
        </member>
        <member name="M:Backdash.Sync.State.Stores.ArrayStateStore`1.Initialize(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Sync.State.Stores.ArrayStateStore`1.Load(Backdash.Data.Frame)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Sync.State.Stores.ArrayStateStore`1.Last">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Sync.State.Stores.ArrayStateStore`1.GetCurrent">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Sync.State.Stores.ArrayStateStore`1.SaveCurrent(Backdash.Data.Frame@,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Sync.State.Stores.ArrayStateStore`1.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Backdash.Sync.State.Stores.BinaryStateStore`1">
            <summary>
            Binary store for temporary save and restore game states using <see cref="T:Backdash.Serialization.IBinarySerializer`1"/>.
            </summary>
            <param name="serializer"></param>
            <typeparam name="TState"></typeparam>
        </member>
        <member name="M:Backdash.Sync.State.Stores.BinaryStateStore`1.#ctor(Backdash.Serialization.IBinarySerializer{`0})">
            <summary>
            Binary store for temporary save and restore game states using <see cref="T:Backdash.Serialization.IBinarySerializer`1"/>.
            </summary>
            <param name="serializer"></param>
            <typeparam name="TState"></typeparam>
        </member>
        <member name="M:Backdash.Sync.State.Stores.BinaryStateStore`1.Initialize(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Sync.State.Stores.BinaryStateStore`1.GetCurrent">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Sync.State.Stores.BinaryStateStore`1.SaveCurrent(Backdash.Data.Frame@,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Sync.State.Stores.BinaryStateStore`1.Load(Backdash.Data.Frame)">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Sync.State.Stores.BinaryStateStore`1.Last">
            <inheritdoc />
        </member>
        <member name="M:Backdash.Sync.State.Stores.BinaryStateStore`1.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Backdash.Sync.TimeSyncOptions">
            <summary>
            Time Synchronization options
            </summary>
        </member>
        <member name="P:Backdash.Sync.TimeSyncOptions.FrameWindowSize">
            <summary>
            Number of frames used for time synchronization
            </summary>
            <value>Defaults to <c>40</c></value>
        </member>
        <member name="P:Backdash.Sync.TimeSyncOptions.MinUniqueFrames">
            <summary>
            Number of unique frames
            </summary>
            <value>Defaults to <c>10</c></value>
        </member>
        <member name="P:Backdash.Sync.TimeSyncOptions.MinFrameAdvantage">
            <summary>
            Minimum required advantage to recommend synchronization.
            Some things just aren't worth correcting for.
            Make sure the difference is relevant before proceeding.
            </summary>
            <value>Defaults to <c>3</c></value>
        </member>
        <member name="P:Backdash.Sync.TimeSyncOptions.MaxFrameAdvantage">
            <summary>
            Max sync recommendation frames.
            </summary>
            <value>Defaults to <c>9</c></value>
        </member>
        <member name="P:Backdash.Sync.TimeSyncOptions.RequireIdleInput">
            <summary>
            Make sure our input had been "idle enough" before recommending
            a sleep. This tries to make the emulator sleep while the
            user's input isn't sweeping in arcs (e.g. fireball motions in
            Street Fighter), which could cause the player to miss moves.
            </summary>
            <value>Defaults to <see langword="false"/></value>
        </member>
    </members>
</doc>
